/*
** Copyright (c) 2014-2020 The Khronos Group Inc.
** 
** Permission is hereby granted, free of charge, to any person obtaining a copy
** of this software and/or associated documentation files (the "Materials"),
** to deal in the Materials without restriction, including without limitation
** the rights to use, copy, modify, merge, publish, distribute, sublicense,
** and/or sell copies of the Materials, and to permit persons to whom the
** Materials are furnished to do so, subject to the following conditions:
** 
** The above copyright notice and this permission notice shall be included in
** all copies or substantial portions of the Materials.
** 
** MODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS
** STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND
** HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/ 
** 
** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
** THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
** FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS
** IN THE MATERIALS.
*/

/*
** This header is automatically generated by the same tool that creates
** the Binary Section of the SPIR-V specification.
*/

/*
** Enumeration tokens for SPIR-V, in various styles:
**   C, C++, C++11, JSON, Lua, Python, C#, D, Beef
** 
** - C will have tokens with a "Spirv" prefix, e.g.: SpirvSourceLanguageGLSL
** - C++ will have tokens in the "spv" name space, e.g.: spv::SourceLanguageGLSL
** - C++11 will use enum classes in the spv namespace, e.g.: spv::SourceLanguage::GLSL
** - Lua will use tables, e.g.: spv.SourceLanguage.GLSL
** - Python will use dictionaries, e.g.: spv['SourceLanguage']['GLSL']
** - C# will use enum classes in the Specification class located in the "Spirv" namespace,
**     e.g.: Spirv.Specification.SourceLanguage.GLSL
** - D will have tokens under the "spv" module, e.g: spv.SourceLanguage.GLSL
** - Beef will use enum classes in the Specification class located in the "Spirv" namespace,
**     e.g.: Spirv.Specification.SourceLanguage.GLSL
** 
** Some tokens act like mask values, which can be OR'd together,
** while others are mutually exclusive.  The mask-like ones have
** "Mask" in their name, and a parallel enum that has the shift
** amount (1 << x) for each corresponding enumerant.
*/

#ifndef spirv_H
#define spirv_H

typedef unsigned int SpirvId;

#define SPV_VERSION 0x10600
#define SPV_REVISION 1

static const unsigned int SpirvMagicNumber = 0x07230203;
static const unsigned int SpirvVersion = 0x00010600;
static const unsigned int SpirvRevision = 1;
static const unsigned int SpirvOpCodeMask = 0xffff;
static const unsigned int SpirvWordCountShift = 16;

typedef enum SpirvSourceLanguage_ {
    SpirvSourceLanguageUnknown = 0,
    SpirvSourceLanguageESSL = 1,
    SpirvSourceLanguageGLSL = 2,
    SpirvSourceLanguageOpenCL_C = 3,
    SpirvSourceLanguageOpenCL_CPP = 4,
    SpirvSourceLanguageHLSL = 5,
    SpirvSourceLanguageCPP_for_OpenCL = 6,
    SpirvSourceLanguageSYCL = 7,
    SpirvSourceLanguageHERO_C = 8,
    SpirvSourceLanguageNZSL = 9,
    SpirvSourceLanguageWGSL = 10,
    SpirvSourceLanguageSlang = 11,
    SpirvSourceLanguageMax = 0x7fffffff,
} SpirvSourceLanguage;

typedef enum SpirvExecutionModel_ {
    SpirvExecutionModelVertex = 0,
    SpirvExecutionModelTessellationControl = 1,
    SpirvExecutionModelTessellationEvaluation = 2,
    SpirvExecutionModelGeometry = 3,
    SpirvExecutionModelFragment = 4,
    SpirvExecutionModelGLCompute = 5,
    SpirvExecutionModelKernel = 6,
    SpirvExecutionModelTaskNV = 5267,
    SpirvExecutionModelMeshNV = 5268,
    SpirvExecutionModelRayGenerationKHR = 5313,
    SpirvExecutionModelRayGenerationNV = 5313,
    SpirvExecutionModelIntersectionKHR = 5314,
    SpirvExecutionModelIntersectionNV = 5314,
    SpirvExecutionModelAnyHitKHR = 5315,
    SpirvExecutionModelAnyHitNV = 5315,
    SpirvExecutionModelClosestHitKHR = 5316,
    SpirvExecutionModelClosestHitNV = 5316,
    SpirvExecutionModelMissKHR = 5317,
    SpirvExecutionModelMissNV = 5317,
    SpirvExecutionModelCallableKHR = 5318,
    SpirvExecutionModelCallableNV = 5318,
    SpirvExecutionModelTaskEXT = 5364,
    SpirvExecutionModelMeshEXT = 5365,
    SpirvExecutionModelMax = 0x7fffffff,
} SpirvExecutionModel;

typedef enum SpirvAddressingModel_ {
    SpirvAddressingModelLogical = 0,
    SpirvAddressingModelPhysical32 = 1,
    SpirvAddressingModelPhysical64 = 2,
    SpirvAddressingModelPhysicalStorageBuffer64 = 5348,
    SpirvAddressingModelPhysicalStorageBuffer64EXT = 5348,
    SpirvAddressingModelMax = 0x7fffffff,
} SpirvAddressingModel;

typedef enum SpirvMemoryModel_ {
    SpirvMemoryModelSimple = 0,
    SpirvMemoryModelGLSL450 = 1,
    SpirvMemoryModelOpenCL = 2,
    SpirvMemoryModelVulkan = 3,
    SpirvMemoryModelVulkanKHR = 3,
    SpirvMemoryModelMax = 0x7fffffff,
} SpirvMemoryModel;

typedef enum SpirvExecutionMode_ {
    SpirvExecutionModeInvocations = 0,
    SpirvExecutionModeSpacingEqual = 1,
    SpirvExecutionModeSpacingFractionalEven = 2,
    SpirvExecutionModeSpacingFractionalOdd = 3,
    SpirvExecutionModeVertexOrderCw = 4,
    SpirvExecutionModeVertexOrderCcw = 5,
    SpirvExecutionModePixelCenterInteger = 6,
    SpirvExecutionModeOriginUpperLeft = 7,
    SpirvExecutionModeOriginLowerLeft = 8,
    SpirvExecutionModeEarlyFragmentTests = 9,
    SpirvExecutionModePointMode = 10,
    SpirvExecutionModeXfb = 11,
    SpirvExecutionModeDepthReplacing = 12,
    SpirvExecutionModeDepthGreater = 14,
    SpirvExecutionModeDepthLess = 15,
    SpirvExecutionModeDepthUnchanged = 16,
    SpirvExecutionModeLocalSize = 17,
    SpirvExecutionModeLocalSizeHint = 18,
    SpirvExecutionModeInputPoints = 19,
    SpirvExecutionModeInputLines = 20,
    SpirvExecutionModeInputLinesAdjacency = 21,
    SpirvExecutionModeTriangles = 22,
    SpirvExecutionModeInputTrianglesAdjacency = 23,
    SpirvExecutionModeQuads = 24,
    SpirvExecutionModeIsolines = 25,
    SpirvExecutionModeOutputVertices = 26,
    SpirvExecutionModeOutputPoints = 27,
    SpirvExecutionModeOutputLineStrip = 28,
    SpirvExecutionModeOutputTriangleStrip = 29,
    SpirvExecutionModeVecTypeHint = 30,
    SpirvExecutionModeContractionOff = 31,
    SpirvExecutionModeInitializer = 33,
    SpirvExecutionModeFinalizer = 34,
    SpirvExecutionModeSubgroupSize = 35,
    SpirvExecutionModeSubgroupsPerWorkgroup = 36,
    SpirvExecutionModeSubgroupsPerWorkgroupId = 37,
    SpirvExecutionModeLocalSizeId = 38,
    SpirvExecutionModeLocalSizeHintId = 39,
    SpirvExecutionModeNonCoherentColorAttachmentReadEXT = 4169,
    SpirvExecutionModeNonCoherentDepthAttachmentReadEXT = 4170,
    SpirvExecutionModeNonCoherentStencilAttachmentReadEXT = 4171,
    SpirvExecutionModeSubgroupUniformControlFlowKHR = 4421,
    SpirvExecutionModePostDepthCoverage = 4446,
    SpirvExecutionModeDenormPreserve = 4459,
    SpirvExecutionModeDenormFlushToZero = 4460,
    SpirvExecutionModeSignedZeroInfNanPreserve = 4461,
    SpirvExecutionModeRoundingModeRTE = 4462,
    SpirvExecutionModeRoundingModeRTZ = 4463,
    SpirvExecutionModeEarlyAndLateFragmentTestsAMD = 5017,
    SpirvExecutionModeStencilRefReplacingEXT = 5027,
    SpirvExecutionModeCoalescingAMDX = 5069,
    SpirvExecutionModeMaxNodeRecursionAMDX = 5071,
    SpirvExecutionModeStaticNumWorkgroupsAMDX = 5072,
    SpirvExecutionModeShaderIndexAMDX = 5073,
    SpirvExecutionModeMaxNumWorkgroupsAMDX = 5077,
    SpirvExecutionModeStencilRefUnchangedFrontAMD = 5079,
    SpirvExecutionModeStencilRefGreaterFrontAMD = 5080,
    SpirvExecutionModeStencilRefLessFrontAMD = 5081,
    SpirvExecutionModeStencilRefUnchangedBackAMD = 5082,
    SpirvExecutionModeStencilRefGreaterBackAMD = 5083,
    SpirvExecutionModeStencilRefLessBackAMD = 5084,
    SpirvExecutionModeOutputLinesEXT = 5269,
    SpirvExecutionModeOutputLinesNV = 5269,
    SpirvExecutionModeOutputPrimitivesEXT = 5270,
    SpirvExecutionModeOutputPrimitivesNV = 5270,
    SpirvExecutionModeDerivativeGroupQuadsNV = 5289,
    SpirvExecutionModeDerivativeGroupLinearNV = 5290,
    SpirvExecutionModeOutputTrianglesEXT = 5298,
    SpirvExecutionModeOutputTrianglesNV = 5298,
    SpirvExecutionModePixelInterlockOrderedEXT = 5366,
    SpirvExecutionModePixelInterlockUnorderedEXT = 5367,
    SpirvExecutionModeSampleInterlockOrderedEXT = 5368,
    SpirvExecutionModeSampleInterlockUnorderedEXT = 5369,
    SpirvExecutionModeShadingRateInterlockOrderedEXT = 5370,
    SpirvExecutionModeShadingRateInterlockUnorderedEXT = 5371,
    SpirvExecutionModeSharedLocalMemorySizeINTEL = 5618,
    SpirvExecutionModeRoundingModeRTPINTEL = 5620,
    SpirvExecutionModeRoundingModeRTNINTEL = 5621,
    SpirvExecutionModeFloatingPointModeALTINTEL = 5622,
    SpirvExecutionModeFloatingPointModeIEEEINTEL = 5623,
    SpirvExecutionModeMaxWorkgroupSizeINTEL = 5893,
    SpirvExecutionModeMaxWorkDimINTEL = 5894,
    SpirvExecutionModeNoGlobalOffsetINTEL = 5895,
    SpirvExecutionModeNumSIMDWorkitemsINTEL = 5896,
    SpirvExecutionModeSchedulerTargetFmaxMhzINTEL = 5903,
    SpirvExecutionModeStreamingInterfaceINTEL = 6154,
    SpirvExecutionModeRegisterMapInterfaceINTEL = 6160,
    SpirvExecutionModeNamedBarrierCountINTEL = 6417,
    SpirvExecutionModeMax = 0x7fffffff,
} SpirvExecutionMode;

typedef enum SpirvStorageClass_ {
    SpirvStorageClassUniformConstant = 0,
    SpirvStorageClassInput = 1,
    SpirvStorageClassUniform = 2,
    SpirvStorageClassOutput = 3,
    SpirvStorageClassWorkgroup = 4,
    SpirvStorageClassCrossWorkgroup = 5,
    SpirvStorageClassPrivate = 6,
    SpirvStorageClassFunction = 7,
    SpirvStorageClassGeneric = 8,
    SpirvStorageClassPushConstant = 9,
    SpirvStorageClassAtomicCounter = 10,
    SpirvStorageClassImage = 11,
    SpirvStorageClassStorageBuffer = 12,
    SpirvStorageClassTileImageEXT = 4172,
    SpirvStorageClassNodePayloadAMDX = 5068,
    SpirvStorageClassNodeOutputPayloadAMDX = 5076,
    SpirvStorageClassCallableDataKHR = 5328,
    SpirvStorageClassCallableDataNV = 5328,
    SpirvStorageClassIncomingCallableDataKHR = 5329,
    SpirvStorageClassIncomingCallableDataNV = 5329,
    SpirvStorageClassRayPayloadKHR = 5338,
    SpirvStorageClassRayPayloadNV = 5338,
    SpirvStorageClassHitAttributeKHR = 5339,
    SpirvStorageClassHitAttributeNV = 5339,
    SpirvStorageClassIncomingRayPayloadKHR = 5342,
    SpirvStorageClassIncomingRayPayloadNV = 5342,
    SpirvStorageClassShaderRecordBufferKHR = 5343,
    SpirvStorageClassShaderRecordBufferNV = 5343,
    SpirvStorageClassPhysicalStorageBuffer = 5349,
    SpirvStorageClassPhysicalStorageBufferEXT = 5349,
    SpirvStorageClassHitObjectAttributeNV = 5385,
    SpirvStorageClassTaskPayloadWorkgroupEXT = 5402,
    SpirvStorageClassCodeSectionINTEL = 5605,
    SpirvStorageClassDeviceOnlyINTEL = 5936,
    SpirvStorageClassHostOnlyINTEL = 5937,
    SpirvStorageClassMax = 0x7fffffff,
} SpirvStorageClass;

typedef enum SpirvDim_ {
    SpirvDim1D = 0,
    SpirvDim2D = 1,
    SpirvDim3D = 2,
    SpirvDimCube = 3,
    SpirvDimRect = 4,
    SpirvDimBuffer = 5,
    SpirvDimSubpassData = 6,
    SpirvDimTileImageDataEXT = 4173,
    SpirvDimMax = 0x7fffffff,
} SpirvDim;

typedef enum SpirvSamplerAddressingMode_ {
    SpirvSamplerAddressingModeNone = 0,
    SpirvSamplerAddressingModeClampToEdge = 1,
    SpirvSamplerAddressingModeClamp = 2,
    SpirvSamplerAddressingModeRepeat = 3,
    SpirvSamplerAddressingModeRepeatMirrored = 4,
    SpirvSamplerAddressingModeMax = 0x7fffffff,
} SpirvSamplerAddressingMode;

typedef enum SpirvSamplerFilterMode_ {
    SpirvSamplerFilterModeNearest = 0,
    SpirvSamplerFilterModeLinear = 1,
    SpirvSamplerFilterModeMax = 0x7fffffff,
} SpirvSamplerFilterMode;

typedef enum SpirvImageFormat_ {
    SpirvImageFormatUnknown = 0,
    SpirvImageFormatRgba32f = 1,
    SpirvImageFormatRgba16f = 2,
    SpirvImageFormatR32f = 3,
    SpirvImageFormatRgba8 = 4,
    SpirvImageFormatRgba8Snorm = 5,
    SpirvImageFormatRg32f = 6,
    SpirvImageFormatRg16f = 7,
    SpirvImageFormatR11fG11fB10f = 8,
    SpirvImageFormatR16f = 9,
    SpirvImageFormatRgba16 = 10,
    SpirvImageFormatRgb10A2 = 11,
    SpirvImageFormatRg16 = 12,
    SpirvImageFormatRg8 = 13,
    SpirvImageFormatR16 = 14,
    SpirvImageFormatR8 = 15,
    SpirvImageFormatRgba16Snorm = 16,
    SpirvImageFormatRg16Snorm = 17,
    SpirvImageFormatRg8Snorm = 18,
    SpirvImageFormatR16Snorm = 19,
    SpirvImageFormatR8Snorm = 20,
    SpirvImageFormatRgba32i = 21,
    SpirvImageFormatRgba16i = 22,
    SpirvImageFormatRgba8i = 23,
    SpirvImageFormatR32i = 24,
    SpirvImageFormatRg32i = 25,
    SpirvImageFormatRg16i = 26,
    SpirvImageFormatRg8i = 27,
    SpirvImageFormatR16i = 28,
    SpirvImageFormatR8i = 29,
    SpirvImageFormatRgba32ui = 30,
    SpirvImageFormatRgba16ui = 31,
    SpirvImageFormatRgba8ui = 32,
    SpirvImageFormatR32ui = 33,
    SpirvImageFormatRgb10a2ui = 34,
    SpirvImageFormatRg32ui = 35,
    SpirvImageFormatRg16ui = 36,
    SpirvImageFormatRg8ui = 37,
    SpirvImageFormatR16ui = 38,
    SpirvImageFormatR8ui = 39,
    SpirvImageFormatR64ui = 40,
    SpirvImageFormatR64i = 41,
    SpirvImageFormatMax = 0x7fffffff,
} SpirvImageFormat;

typedef enum SpirvImageChannelOrder_ {
    SpirvImageChannelOrderR = 0,
    SpirvImageChannelOrderA = 1,
    SpirvImageChannelOrderRG = 2,
    SpirvImageChannelOrderRA = 3,
    SpirvImageChannelOrderRGB = 4,
    SpirvImageChannelOrderRGBA = 5,
    SpirvImageChannelOrderBGRA = 6,
    SpirvImageChannelOrderARGB = 7,
    SpirvImageChannelOrderIntensity = 8,
    SpirvImageChannelOrderLuminance = 9,
    SpirvImageChannelOrderRx = 10,
    SpirvImageChannelOrderRGx = 11,
    SpirvImageChannelOrderRGBx = 12,
    SpirvImageChannelOrderDepth = 13,
    SpirvImageChannelOrderDepthStencil = 14,
    SpirvImageChannelOrdersRGB = 15,
    SpirvImageChannelOrdersRGBx = 16,
    SpirvImageChannelOrdersRGBA = 17,
    SpirvImageChannelOrdersBGRA = 18,
    SpirvImageChannelOrderABGR = 19,
    SpirvImageChannelOrderMax = 0x7fffffff,
} SpirvImageChannelOrder;

typedef enum SpirvImageChannelDataType_ {
    SpirvImageChannelDataTypeSnormInt8 = 0,
    SpirvImageChannelDataTypeSnormInt16 = 1,
    SpirvImageChannelDataTypeUnormInt8 = 2,
    SpirvImageChannelDataTypeUnormInt16 = 3,
    SpirvImageChannelDataTypeUnormShort565 = 4,
    SpirvImageChannelDataTypeUnormShort555 = 5,
    SpirvImageChannelDataTypeUnormInt101010 = 6,
    SpirvImageChannelDataTypeSignedInt8 = 7,
    SpirvImageChannelDataTypeSignedInt16 = 8,
    SpirvImageChannelDataTypeSignedInt32 = 9,
    SpirvImageChannelDataTypeUnsignedInt8 = 10,
    SpirvImageChannelDataTypeUnsignedInt16 = 11,
    SpirvImageChannelDataTypeUnsignedInt32 = 12,
    SpirvImageChannelDataTypeHalfFloat = 13,
    SpirvImageChannelDataTypeFloat = 14,
    SpirvImageChannelDataTypeUnormInt24 = 15,
    SpirvImageChannelDataTypeUnormInt101010_2 = 16,
    SpirvImageChannelDataTypeUnsignedIntRaw10EXT = 19,
    SpirvImageChannelDataTypeUnsignedIntRaw12EXT = 20,
    SpirvImageChannelDataTypeMax = 0x7fffffff,
} SpirvImageChannelDataType;

typedef enum SpirvImageOperandsShift_ {
    SpirvImageOperandsBiasShift = 0,
    SpirvImageOperandsLodShift = 1,
    SpirvImageOperandsGradShift = 2,
    SpirvImageOperandsConstOffsetShift = 3,
    SpirvImageOperandsOffsetShift = 4,
    SpirvImageOperandsConstOffsetsShift = 5,
    SpirvImageOperandsSampleShift = 6,
    SpirvImageOperandsMinLodShift = 7,
    SpirvImageOperandsMakeTexelAvailableShift = 8,
    SpirvImageOperandsMakeTexelAvailableKHRShift = 8,
    SpirvImageOperandsMakeTexelVisibleShift = 9,
    SpirvImageOperandsMakeTexelVisibleKHRShift = 9,
    SpirvImageOperandsNonPrivateTexelShift = 10,
    SpirvImageOperandsNonPrivateTexelKHRShift = 10,
    SpirvImageOperandsVolatileTexelShift = 11,
    SpirvImageOperandsVolatileTexelKHRShift = 11,
    SpirvImageOperandsSignExtendShift = 12,
    SpirvImageOperandsZeroExtendShift = 13,
    SpirvImageOperandsNontemporalShift = 14,
    SpirvImageOperandsOffsetsShift = 16,
    SpirvImageOperandsMax = 0x7fffffff,
} SpirvImageOperandsShift;

typedef enum SpirvImageOperandsMask_ {
    SpirvImageOperandsMaskNone = 0,
    SpirvImageOperandsBiasMask = 0x00000001,
    SpirvImageOperandsLodMask = 0x00000002,
    SpirvImageOperandsGradMask = 0x00000004,
    SpirvImageOperandsConstOffsetMask = 0x00000008,
    SpirvImageOperandsOffsetMask = 0x00000010,
    SpirvImageOperandsConstOffsetsMask = 0x00000020,
    SpirvImageOperandsSampleMask = 0x00000040,
    SpirvImageOperandsMinLodMask = 0x00000080,
    SpirvImageOperandsMakeTexelAvailableMask = 0x00000100,
    SpirvImageOperandsMakeTexelAvailableKHRMask = 0x00000100,
    SpirvImageOperandsMakeTexelVisibleMask = 0x00000200,
    SpirvImageOperandsMakeTexelVisibleKHRMask = 0x00000200,
    SpirvImageOperandsNonPrivateTexelMask = 0x00000400,
    SpirvImageOperandsNonPrivateTexelKHRMask = 0x00000400,
    SpirvImageOperandsVolatileTexelMask = 0x00000800,
    SpirvImageOperandsVolatileTexelKHRMask = 0x00000800,
    SpirvImageOperandsSignExtendMask = 0x00001000,
    SpirvImageOperandsZeroExtendMask = 0x00002000,
    SpirvImageOperandsNontemporalMask = 0x00004000,
    SpirvImageOperandsOffsetsMask = 0x00010000,
} SpirvImageOperandsMask;

typedef enum SpirvFPFastMathModeShift_ {
    SpirvFPFastMathModeNotNaNShift = 0,
    SpirvFPFastMathModeNotInfShift = 1,
    SpirvFPFastMathModeNSZShift = 2,
    SpirvFPFastMathModeAllowRecipShift = 3,
    SpirvFPFastMathModeFastShift = 4,
    SpirvFPFastMathModeAllowContractFastINTELShift = 16,
    SpirvFPFastMathModeAllowReassocINTELShift = 17,
    SpirvFPFastMathModeMax = 0x7fffffff,
} SpirvFPFastMathModeShift;

typedef enum SpirvFPFastMathModeMask_ {
    SpirvFPFastMathModeMaskNone = 0,
    SpirvFPFastMathModeNotNaNMask = 0x00000001,
    SpirvFPFastMathModeNotInfMask = 0x00000002,
    SpirvFPFastMathModeNSZMask = 0x00000004,
    SpirvFPFastMathModeAllowRecipMask = 0x00000008,
    SpirvFPFastMathModeFastMask = 0x00000010,
    SpirvFPFastMathModeAllowContractFastINTELMask = 0x00010000,
    SpirvFPFastMathModeAllowReassocINTELMask = 0x00020000,
} SpirvFPFastMathModeMask;

typedef enum SpirvFPRoundingMode_ {
    SpirvFPRoundingModeRTE = 0,
    SpirvFPRoundingModeRTZ = 1,
    SpirvFPRoundingModeRTP = 2,
    SpirvFPRoundingModeRTN = 3,
    SpirvFPRoundingModeMax = 0x7fffffff,
} SpirvFPRoundingMode;

typedef enum SpirvLinkageType_ {
    SpirvLinkageTypeExport = 0,
    SpirvLinkageTypeImport = 1,
    SpirvLinkageTypeLinkOnceODR = 2,
    SpirvLinkageTypeMax = 0x7fffffff,
} SpirvLinkageType;

typedef enum SpirvAccessQualifier_ {
    SpirvAccessQualifierReadOnly = 0,
    SpirvAccessQualifierWriteOnly = 1,
    SpirvAccessQualifierReadWrite = 2,
    SpirvAccessQualifierMax = 0x7fffffff,
} SpirvAccessQualifier;

typedef enum SpirvFunctionParameterAttribute_ {
    SpirvFunctionParameterAttributeZext = 0,
    SpirvFunctionParameterAttributeSext = 1,
    SpirvFunctionParameterAttributeByVal = 2,
    SpirvFunctionParameterAttributeSret = 3,
    SpirvFunctionParameterAttributeNoAlias = 4,
    SpirvFunctionParameterAttributeNoCapture = 5,
    SpirvFunctionParameterAttributeNoWrite = 6,
    SpirvFunctionParameterAttributeNoReadWrite = 7,
    SpirvFunctionParameterAttributeRuntimeAlignedINTEL = 5940,
    SpirvFunctionParameterAttributeMax = 0x7fffffff,
} SpirvFunctionParameterAttribute;

typedef enum SpirvDecoration_ {
    SpirvDecorationRelaxedPrecision = 0,
    SpirvDecorationSpecId = 1,
    SpirvDecorationBlock = 2,
    SpirvDecorationBufferBlock = 3,
    SpirvDecorationRowMajor = 4,
    SpirvDecorationColMajor = 5,
    SpirvDecorationArrayStride = 6,
    SpirvDecorationMatrixStride = 7,
    SpirvDecorationGLSLShared = 8,
    SpirvDecorationGLSLPacked = 9,
    SpirvDecorationCPacked = 10,
    SpirvDecorationBuiltIn = 11,
    SpirvDecorationNoPerspective = 13,
    SpirvDecorationFlat = 14,
    SpirvDecorationPatch = 15,
    SpirvDecorationCentroid = 16,
    SpirvDecorationSample = 17,
    SpirvDecorationInvariant = 18,
    SpirvDecorationRestrict = 19,
    SpirvDecorationAliased = 20,
    SpirvDecorationVolatile = 21,
    SpirvDecorationConstant = 22,
    SpirvDecorationCoherent = 23,
    SpirvDecorationNonWritable = 24,
    SpirvDecorationNonReadable = 25,
    SpirvDecorationUniform = 26,
    SpirvDecorationUniformId = 27,
    SpirvDecorationSaturatedConversion = 28,
    SpirvDecorationStream = 29,
    SpirvDecorationLocation = 30,
    SpirvDecorationComponent = 31,
    SpirvDecorationIndex = 32,
    SpirvDecorationBinding = 33,
    SpirvDecorationDescriptorSet = 34,
    SpirvDecorationOffset = 35,
    SpirvDecorationXfbBuffer = 36,
    SpirvDecorationXfbStride = 37,
    SpirvDecorationFuncParamAttr = 38,
    SpirvDecorationFPRoundingMode = 39,
    SpirvDecorationFPFastMathMode = 40,
    SpirvDecorationLinkageAttributes = 41,
    SpirvDecorationNoContraction = 42,
    SpirvDecorationInputAttachmentIndex = 43,
    SpirvDecorationAlignment = 44,
    SpirvDecorationMaxByteOffset = 45,
    SpirvDecorationAlignmentId = 46,
    SpirvDecorationMaxByteOffsetId = 47,
    SpirvDecorationNoSignedWrap = 4469,
    SpirvDecorationNoUnsignedWrap = 4470,
    SpirvDecorationWeightTextureQCOM = 4487,
    SpirvDecorationBlockMatchTextureQCOM = 4488,
    SpirvDecorationExplicitInterpAMD = 4999,
    SpirvDecorationNodeSharesPayloadLimitsWithAMDX = 5019,
    SpirvDecorationNodeMaxPayloadsAMDX = 5020,
    SpirvDecorationTrackFinishWritingAMDX = 5078,
    SpirvDecorationPayloadNodeNameAMDX = 5091,
    SpirvDecorationOverrideCoverageNV = 5248,
    SpirvDecorationPassthroughNV = 5250,
    SpirvDecorationViewportRelativeNV = 5252,
    SpirvDecorationSecondaryViewportRelativeNV = 5256,
    SpirvDecorationPerPrimitiveEXT = 5271,
    SpirvDecorationPerPrimitiveNV = 5271,
    SpirvDecorationPerViewNV = 5272,
    SpirvDecorationPerTaskNV = 5273,
    SpirvDecorationPerVertexKHR = 5285,
    SpirvDecorationPerVertexNV = 5285,
    SpirvDecorationNonUniform = 5300,
    SpirvDecorationNonUniformEXT = 5300,
    SpirvDecorationRestrictPointer = 5355,
    SpirvDecorationRestrictPointerEXT = 5355,
    SpirvDecorationAliasedPointer = 5356,
    SpirvDecorationAliasedPointerEXT = 5356,
    SpirvDecorationHitObjectShaderRecordBufferNV = 5386,
    SpirvDecorationBindlessSamplerNV = 5398,
    SpirvDecorationBindlessImageNV = 5399,
    SpirvDecorationBoundSamplerNV = 5400,
    SpirvDecorationBoundImageNV = 5401,
    SpirvDecorationSIMTCallINTEL = 5599,
    SpirvDecorationReferencedIndirectlyINTEL = 5602,
    SpirvDecorationClobberINTEL = 5607,
    SpirvDecorationSideEffectsINTEL = 5608,
    SpirvDecorationVectorComputeVariableINTEL = 5624,
    SpirvDecorationFuncParamIOKindINTEL = 5625,
    SpirvDecorationVectorComputeFunctionINTEL = 5626,
    SpirvDecorationStackCallINTEL = 5627,
    SpirvDecorationGlobalVariableOffsetINTEL = 5628,
    SpirvDecorationCounterBuffer = 5634,
    SpirvDecorationHlslCounterBufferGOOGLE = 5634,
    SpirvDecorationHlslSemanticGOOGLE = 5635,
    SpirvDecorationUserSemantic = 5635,
    SpirvDecorationUserTypeGOOGLE = 5636,
    SpirvDecorationFunctionRoundingModeINTEL = 5822,
    SpirvDecorationFunctionDenormModeINTEL = 5823,
    SpirvDecorationRegisterINTEL = 5825,
    SpirvDecorationMemoryINTEL = 5826,
    SpirvDecorationNumbanksINTEL = 5827,
    SpirvDecorationBankwidthINTEL = 5828,
    SpirvDecorationMaxPrivateCopiesINTEL = 5829,
    SpirvDecorationSinglepumpINTEL = 5830,
    SpirvDecorationDoublepumpINTEL = 5831,
    SpirvDecorationMaxReplicatesINTEL = 5832,
    SpirvDecorationSimpleDualPortINTEL = 5833,
    SpirvDecorationMergeINTEL = 5834,
    SpirvDecorationBankBitsINTEL = 5835,
    SpirvDecorationForcePow2DepthINTEL = 5836,
    SpirvDecorationStridesizeINTEL = 5883,
    SpirvDecorationWordsizeINTEL = 5884,
    SpirvDecorationTrueDualPortINTEL = 5885,
    SpirvDecorationBurstCoalesceINTEL = 5899,
    SpirvDecorationCacheSizeINTEL = 5900,
    SpirvDecorationDontStaticallyCoalesceINTEL = 5901,
    SpirvDecorationPrefetchINTEL = 5902,
    SpirvDecorationStallEnableINTEL = 5905,
    SpirvDecorationFuseLoopsInFunctionINTEL = 5907,
    SpirvDecorationMathOpDSPModeINTEL = 5909,
    SpirvDecorationAliasScopeINTEL = 5914,
    SpirvDecorationNoAliasINTEL = 5915,
    SpirvDecorationInitiationIntervalINTEL = 5917,
    SpirvDecorationMaxConcurrencyINTEL = 5918,
    SpirvDecorationPipelineEnableINTEL = 5919,
    SpirvDecorationBufferLocationINTEL = 5921,
    SpirvDecorationIOPipeStorageINTEL = 5944,
    SpirvDecorationFunctionFloatingPointModeINTEL = 6080,
    SpirvDecorationSingleElementVectorINTEL = 6085,
    SpirvDecorationVectorComputeCallableFunctionINTEL = 6087,
    SpirvDecorationMediaBlockIOINTEL = 6140,
    SpirvDecorationStallFreeINTEL = 6151,
    SpirvDecorationFPMaxErrorDecorationINTEL = 6170,
    SpirvDecorationLatencyControlLabelINTEL = 6172,
    SpirvDecorationLatencyControlConstraintINTEL = 6173,
    SpirvDecorationConduitKernelArgumentINTEL = 6175,
    SpirvDecorationRegisterMapKernelArgumentINTEL = 6176,
    SpirvDecorationMMHostInterfaceAddressWidthINTEL = 6177,
    SpirvDecorationMMHostInterfaceDataWidthINTEL = 6178,
    SpirvDecorationMMHostInterfaceLatencyINTEL = 6179,
    SpirvDecorationMMHostInterfaceReadWriteModeINTEL = 6180,
    SpirvDecorationMMHostInterfaceMaxBurstINTEL = 6181,
    SpirvDecorationMMHostInterfaceWaitRequestINTEL = 6182,
    SpirvDecorationStableKernelArgumentINTEL = 6183,
    SpirvDecorationHostAccessINTEL = 6188,
    SpirvDecorationInitModeINTEL = 6190,
    SpirvDecorationImplementInRegisterMapINTEL = 6191,
    SpirvDecorationCacheControlLoadINTEL = 6442,
    SpirvDecorationCacheControlStoreINTEL = 6443,
    SpirvDecorationMax = 0x7fffffff,
} SpirvDecoration;

typedef enum SpirvBuiltIn_ {
    SpirvBuiltInPosition = 0,
    SpirvBuiltInPointSize = 1,
    SpirvBuiltInClipDistance = 3,
    SpirvBuiltInCullDistance = 4,
    SpirvBuiltInVertexId = 5,
    SpirvBuiltInInstanceId = 6,
    SpirvBuiltInPrimitiveId = 7,
    SpirvBuiltInInvocationId = 8,
    SpirvBuiltInLayer = 9,
    SpirvBuiltInViewportIndex = 10,
    SpirvBuiltInTessLevelOuter = 11,
    SpirvBuiltInTessLevelInner = 12,
    SpirvBuiltInTessCoord = 13,
    SpirvBuiltInPatchVertices = 14,
    SpirvBuiltInFragCoord = 15,
    SpirvBuiltInPointCoord = 16,
    SpirvBuiltInFrontFacing = 17,
    SpirvBuiltInSampleId = 18,
    SpirvBuiltInSamplePosition = 19,
    SpirvBuiltInSampleMask = 20,
    SpirvBuiltInFragDepth = 22,
    SpirvBuiltInHelperInvocation = 23,
    SpirvBuiltInNumWorkgroups = 24,
    SpirvBuiltInWorkgroupSize = 25,
    SpirvBuiltInWorkgroupId = 26,
    SpirvBuiltInLocalInvocationId = 27,
    SpirvBuiltInGlobalInvocationId = 28,
    SpirvBuiltInLocalInvocationIndex = 29,
    SpirvBuiltInWorkDim = 30,
    SpirvBuiltInGlobalSize = 31,
    SpirvBuiltInEnqueuedWorkgroupSize = 32,
    SpirvBuiltInGlobalOffset = 33,
    SpirvBuiltInGlobalLinearId = 34,
    SpirvBuiltInSubgroupSize = 36,
    SpirvBuiltInSubgroupMaxSize = 37,
    SpirvBuiltInNumSubgroups = 38,
    SpirvBuiltInNumEnqueuedSubgroups = 39,
    SpirvBuiltInSubgroupId = 40,
    SpirvBuiltInSubgroupLocalInvocationId = 41,
    SpirvBuiltInVertexIndex = 42,
    SpirvBuiltInInstanceIndex = 43,
    SpirvBuiltInCoreIDARM = 4160,
    SpirvBuiltInCoreCountARM = 4161,
    SpirvBuiltInCoreMaxIDARM = 4162,
    SpirvBuiltInWarpIDARM = 4163,
    SpirvBuiltInWarpMaxIDARM = 4164,
    SpirvBuiltInSubgroupEqMask = 4416,
    SpirvBuiltInSubgroupEqMaskKHR = 4416,
    SpirvBuiltInSubgroupGeMask = 4417,
    SpirvBuiltInSubgroupGeMaskKHR = 4417,
    SpirvBuiltInSubgroupGtMask = 4418,
    SpirvBuiltInSubgroupGtMaskKHR = 4418,
    SpirvBuiltInSubgroupLeMask = 4419,
    SpirvBuiltInSubgroupLeMaskKHR = 4419,
    SpirvBuiltInSubgroupLtMask = 4420,
    SpirvBuiltInSubgroupLtMaskKHR = 4420,
    SpirvBuiltInBaseVertex = 4424,
    SpirvBuiltInBaseInstance = 4425,
    SpirvBuiltInDrawIndex = 4426,
    SpirvBuiltInPrimitiveShadingRateKHR = 4432,
    SpirvBuiltInDeviceIndex = 4438,
    SpirvBuiltInViewIndex = 4440,
    SpirvBuiltInShadingRateKHR = 4444,
    SpirvBuiltInBaryCoordNoPerspAMD = 4992,
    SpirvBuiltInBaryCoordNoPerspCentroidAMD = 4993,
    SpirvBuiltInBaryCoordNoPerspSampleAMD = 4994,
    SpirvBuiltInBaryCoordSmoothAMD = 4995,
    SpirvBuiltInBaryCoordSmoothCentroidAMD = 4996,
    SpirvBuiltInBaryCoordSmoothSampleAMD = 4997,
    SpirvBuiltInBaryCoordPullModelAMD = 4998,
    SpirvBuiltInFragStencilRefEXT = 5014,
    SpirvBuiltInCoalescedInputCountAMDX = 5021,
    SpirvBuiltInShaderIndexAMDX = 5073,
    SpirvBuiltInViewportMaskNV = 5253,
    SpirvBuiltInSecondaryPositionNV = 5257,
    SpirvBuiltInSecondaryViewportMaskNV = 5258,
    SpirvBuiltInPositionPerViewNV = 5261,
    SpirvBuiltInViewportMaskPerViewNV = 5262,
    SpirvBuiltInFullyCoveredEXT = 5264,
    SpirvBuiltInTaskCountNV = 5274,
    SpirvBuiltInPrimitiveCountNV = 5275,
    SpirvBuiltInPrimitiveIndicesNV = 5276,
    SpirvBuiltInClipDistancePerViewNV = 5277,
    SpirvBuiltInCullDistancePerViewNV = 5278,
    SpirvBuiltInLayerPerViewNV = 5279,
    SpirvBuiltInMeshViewCountNV = 5280,
    SpirvBuiltInMeshViewIndicesNV = 5281,
    SpirvBuiltInBaryCoordKHR = 5286,
    SpirvBuiltInBaryCoordNV = 5286,
    SpirvBuiltInBaryCoordNoPerspKHR = 5287,
    SpirvBuiltInBaryCoordNoPerspNV = 5287,
    SpirvBuiltInFragSizeEXT = 5292,
    SpirvBuiltInFragmentSizeNV = 5292,
    SpirvBuiltInFragInvocationCountEXT = 5293,
    SpirvBuiltInInvocationsPerPixelNV = 5293,
    SpirvBuiltInPrimitivePointIndicesEXT = 5294,
    SpirvBuiltInPrimitiveLineIndicesEXT = 5295,
    SpirvBuiltInPrimitiveTriangleIndicesEXT = 5296,
    SpirvBuiltInCullPrimitiveEXT = 5299,
    SpirvBuiltInLaunchIdKHR = 5319,
    SpirvBuiltInLaunchIdNV = 5319,
    SpirvBuiltInLaunchSizeKHR = 5320,
    SpirvBuiltInLaunchSizeNV = 5320,
    SpirvBuiltInWorldRayOriginKHR = 5321,
    SpirvBuiltInWorldRayOriginNV = 5321,
    SpirvBuiltInWorldRayDirectionKHR = 5322,
    SpirvBuiltInWorldRayDirectionNV = 5322,
    SpirvBuiltInObjectRayOriginKHR = 5323,
    SpirvBuiltInObjectRayOriginNV = 5323,
    SpirvBuiltInObjectRayDirectionKHR = 5324,
    SpirvBuiltInObjectRayDirectionNV = 5324,
    SpirvBuiltInRayTminKHR = 5325,
    SpirvBuiltInRayTminNV = 5325,
    SpirvBuiltInRayTmaxKHR = 5326,
    SpirvBuiltInRayTmaxNV = 5326,
    SpirvBuiltInInstanceCustomIndexKHR = 5327,
    SpirvBuiltInInstanceCustomIndexNV = 5327,
    SpirvBuiltInObjectToWorldKHR = 5330,
    SpirvBuiltInObjectToWorldNV = 5330,
    SpirvBuiltInWorldToObjectKHR = 5331,
    SpirvBuiltInWorldToObjectNV = 5331,
    SpirvBuiltInHitTNV = 5332,
    SpirvBuiltInHitKindKHR = 5333,
    SpirvBuiltInHitKindNV = 5333,
    SpirvBuiltInCurrentRayTimeNV = 5334,
    SpirvBuiltInHitTriangleVertexPositionsKHR = 5335,
    SpirvBuiltInHitMicroTriangleVertexPositionsNV = 5337,
    SpirvBuiltInHitMicroTriangleVertexBarycentricsNV = 5344,
    SpirvBuiltInIncomingRayFlagsKHR = 5351,
    SpirvBuiltInIncomingRayFlagsNV = 5351,
    SpirvBuiltInRayGeometryIndexKHR = 5352,
    SpirvBuiltInWarpsPerSMNV = 5374,
    SpirvBuiltInSMCountNV = 5375,
    SpirvBuiltInWarpIDNV = 5376,
    SpirvBuiltInSMIDNV = 5377,
    SpirvBuiltInHitKindFrontFacingMicroTriangleNV = 5405,
    SpirvBuiltInHitKindBackFacingMicroTriangleNV = 5406,
    SpirvBuiltInCullMaskKHR = 6021,
    SpirvBuiltInMax = 0x7fffffff,
} SpirvBuiltIn;

typedef enum SpirvSelectionControlShift_ {
    SpirvSelectionControlFlattenShift = 0,
    SpirvSelectionControlDontFlattenShift = 1,
    SpirvSelectionControlMax = 0x7fffffff,
} SpirvSelectionControlShift;

typedef enum SpirvSelectionControlMask_ {
    SpirvSelectionControlMaskNone = 0,
    SpirvSelectionControlFlattenMask = 0x00000001,
    SpirvSelectionControlDontFlattenMask = 0x00000002,
} SpirvSelectionControlMask;

typedef enum SpirvLoopControlShift_ {
    SpirvLoopControlUnrollShift = 0,
    SpirvLoopControlDontUnrollShift = 1,
    SpirvLoopControlDependencyInfiniteShift = 2,
    SpirvLoopControlDependencyLengthShift = 3,
    SpirvLoopControlMinIterationsShift = 4,
    SpirvLoopControlMaxIterationsShift = 5,
    SpirvLoopControlIterationMultipleShift = 6,
    SpirvLoopControlPeelCountShift = 7,
    SpirvLoopControlPartialCountShift = 8,
    SpirvLoopControlInitiationIntervalINTELShift = 16,
    SpirvLoopControlMaxConcurrencyINTELShift = 17,
    SpirvLoopControlDependencyArrayINTELShift = 18,
    SpirvLoopControlPipelineEnableINTELShift = 19,
    SpirvLoopControlLoopCoalesceINTELShift = 20,
    SpirvLoopControlMaxInterleavingINTELShift = 21,
    SpirvLoopControlSpeculatedIterationsINTELShift = 22,
    SpirvLoopControlNoFusionINTELShift = 23,
    SpirvLoopControlLoopCountINTELShift = 24,
    SpirvLoopControlMaxReinvocationDelayINTELShift = 25,
    SpirvLoopControlMax = 0x7fffffff,
} SpirvLoopControlShift;

typedef enum SpirvLoopControlMask_ {
    SpirvLoopControlMaskNone = 0,
    SpirvLoopControlUnrollMask = 0x00000001,
    SpirvLoopControlDontUnrollMask = 0x00000002,
    SpirvLoopControlDependencyInfiniteMask = 0x00000004,
    SpirvLoopControlDependencyLengthMask = 0x00000008,
    SpirvLoopControlMinIterationsMask = 0x00000010,
    SpirvLoopControlMaxIterationsMask = 0x00000020,
    SpirvLoopControlIterationMultipleMask = 0x00000040,
    SpirvLoopControlPeelCountMask = 0x00000080,
    SpirvLoopControlPartialCountMask = 0x00000100,
    SpirvLoopControlInitiationIntervalINTELMask = 0x00010000,
    SpirvLoopControlMaxConcurrencyINTELMask = 0x00020000,
    SpirvLoopControlDependencyArrayINTELMask = 0x00040000,
    SpirvLoopControlPipelineEnableINTELMask = 0x00080000,
    SpirvLoopControlLoopCoalesceINTELMask = 0x00100000,
    SpirvLoopControlMaxInterleavingINTELMask = 0x00200000,
    SpirvLoopControlSpeculatedIterationsINTELMask = 0x00400000,
    SpirvLoopControlNoFusionINTELMask = 0x00800000,
    SpirvLoopControlLoopCountINTELMask = 0x01000000,
    SpirvLoopControlMaxReinvocationDelayINTELMask = 0x02000000,
} SpirvLoopControlMask;

typedef enum SpirvFunctionControlShift_ {
    SpirvFunctionControlInlineShift = 0,
    SpirvFunctionControlDontInlineShift = 1,
    SpirvFunctionControlPureShift = 2,
    SpirvFunctionControlConstShift = 3,
    SpirvFunctionControlOptNoneINTELShift = 16,
    SpirvFunctionControlMax = 0x7fffffff,
} SpirvFunctionControlShift;

typedef enum SpirvFunctionControlMask_ {
    SpirvFunctionControlMaskNone = 0,
    SpirvFunctionControlInlineMask = 0x00000001,
    SpirvFunctionControlDontInlineMask = 0x00000002,
    SpirvFunctionControlPureMask = 0x00000004,
    SpirvFunctionControlConstMask = 0x00000008,
    SpirvFunctionControlOptNoneINTELMask = 0x00010000,
} SpirvFunctionControlMask;

typedef enum SpirvMemorySemanticsShift_ {
    SpirvMemorySemanticsAcquireShift = 1,
    SpirvMemorySemanticsReleaseShift = 2,
    SpirvMemorySemanticsAcquireReleaseShift = 3,
    SpirvMemorySemanticsSequentiallyConsistentShift = 4,
    SpirvMemorySemanticsUniformMemoryShift = 6,
    SpirvMemorySemanticsSubgroupMemoryShift = 7,
    SpirvMemorySemanticsWorkgroupMemoryShift = 8,
    SpirvMemorySemanticsCrossWorkgroupMemoryShift = 9,
    SpirvMemorySemanticsAtomicCounterMemoryShift = 10,
    SpirvMemorySemanticsImageMemoryShift = 11,
    SpirvMemorySemanticsOutputMemoryShift = 12,
    SpirvMemorySemanticsOutputMemoryKHRShift = 12,
    SpirvMemorySemanticsMakeAvailableShift = 13,
    SpirvMemorySemanticsMakeAvailableKHRShift = 13,
    SpirvMemorySemanticsMakeVisibleShift = 14,
    SpirvMemorySemanticsMakeVisibleKHRShift = 14,
    SpirvMemorySemanticsVolatileShift = 15,
    SpirvMemorySemanticsMax = 0x7fffffff,
} SpirvMemorySemanticsShift;

typedef enum SpirvMemorySemanticsMask_ {
    SpirvMemorySemanticsMaskNone = 0,
    SpirvMemorySemanticsAcquireMask = 0x00000002,
    SpirvMemorySemanticsReleaseMask = 0x00000004,
    SpirvMemorySemanticsAcquireReleaseMask = 0x00000008,
    SpirvMemorySemanticsSequentiallyConsistentMask = 0x00000010,
    SpirvMemorySemanticsUniformMemoryMask = 0x00000040,
    SpirvMemorySemanticsSubgroupMemoryMask = 0x00000080,
    SpirvMemorySemanticsWorkgroupMemoryMask = 0x00000100,
    SpirvMemorySemanticsCrossWorkgroupMemoryMask = 0x00000200,
    SpirvMemorySemanticsAtomicCounterMemoryMask = 0x00000400,
    SpirvMemorySemanticsImageMemoryMask = 0x00000800,
    SpirvMemorySemanticsOutputMemoryMask = 0x00001000,
    SpirvMemorySemanticsOutputMemoryKHRMask = 0x00001000,
    SpirvMemorySemanticsMakeAvailableMask = 0x00002000,
    SpirvMemorySemanticsMakeAvailableKHRMask = 0x00002000,
    SpirvMemorySemanticsMakeVisibleMask = 0x00004000,
    SpirvMemorySemanticsMakeVisibleKHRMask = 0x00004000,
    SpirvMemorySemanticsVolatileMask = 0x00008000,
} SpirvMemorySemanticsMask;

typedef enum SpirvMemoryAccessShift_ {
    SpirvMemoryAccessVolatileShift = 0,
    SpirvMemoryAccessAlignedShift = 1,
    SpirvMemoryAccessNontemporalShift = 2,
    SpirvMemoryAccessMakePointerAvailableShift = 3,
    SpirvMemoryAccessMakePointerAvailableKHRShift = 3,
    SpirvMemoryAccessMakePointerVisibleShift = 4,
    SpirvMemoryAccessMakePointerVisibleKHRShift = 4,
    SpirvMemoryAccessNonPrivatePointerShift = 5,
    SpirvMemoryAccessNonPrivatePointerKHRShift = 5,
    SpirvMemoryAccessAliasScopeINTELMaskShift = 16,
    SpirvMemoryAccessNoAliasINTELMaskShift = 17,
    SpirvMemoryAccessMax = 0x7fffffff,
} SpirvMemoryAccessShift;

typedef enum SpirvMemoryAccessMask_ {
    SpirvMemoryAccessMaskNone = 0,
    SpirvMemoryAccessVolatileMask = 0x00000001,
    SpirvMemoryAccessAlignedMask = 0x00000002,
    SpirvMemoryAccessNontemporalMask = 0x00000004,
    SpirvMemoryAccessMakePointerAvailableMask = 0x00000008,
    SpirvMemoryAccessMakePointerAvailableKHRMask = 0x00000008,
    SpirvMemoryAccessMakePointerVisibleMask = 0x00000010,
    SpirvMemoryAccessMakePointerVisibleKHRMask = 0x00000010,
    SpirvMemoryAccessNonPrivatePointerMask = 0x00000020,
    SpirvMemoryAccessNonPrivatePointerKHRMask = 0x00000020,
    SpirvMemoryAccessAliasScopeINTELMaskMask = 0x00010000,
    SpirvMemoryAccessNoAliasINTELMaskMask = 0x00020000,
} SpirvMemoryAccessMask;

typedef enum SpirvScope_ {
    SpirvScopeCrossDevice = 0,
    SpirvScopeDevice = 1,
    SpirvScopeWorkgroup = 2,
    SpirvScopeSubgroup = 3,
    SpirvScopeInvocation = 4,
    SpirvScopeQueueFamily = 5,
    SpirvScopeQueueFamilyKHR = 5,
    SpirvScopeShaderCallKHR = 6,
    SpirvScopeMax = 0x7fffffff,
} SpirvScope;

typedef enum SpirvGroupOperation_ {
    SpirvGroupOperationReduce = 0,
    SpirvGroupOperationInclusiveScan = 1,
    SpirvGroupOperationExclusiveScan = 2,
    SpirvGroupOperationClusteredReduce = 3,
    SpirvGroupOperationPartitionedReduceNV = 6,
    SpirvGroupOperationPartitionedInclusiveScanNV = 7,
    SpirvGroupOperationPartitionedExclusiveScanNV = 8,
    SpirvGroupOperationMax = 0x7fffffff,
} SpirvGroupOperation;

typedef enum SpirvKernelEnqueueFlags_ {
    SpirvKernelEnqueueFlagsNoWait = 0,
    SpirvKernelEnqueueFlagsWaitKernel = 1,
    SpirvKernelEnqueueFlagsWaitWorkGroup = 2,
    SpirvKernelEnqueueFlagsMax = 0x7fffffff,
} SpirvKernelEnqueueFlags;

typedef enum SpirvKernelProfilingInfoShift_ {
    SpirvKernelProfilingInfoCmdExecTimeShift = 0,
    SpirvKernelProfilingInfoMax = 0x7fffffff,
} SpirvKernelProfilingInfoShift;

typedef enum SpirvKernelProfilingInfoMask_ {
    SpirvKernelProfilingInfoMaskNone = 0,
    SpirvKernelProfilingInfoCmdExecTimeMask = 0x00000001,
} SpirvKernelProfilingInfoMask;

typedef enum SpirvCapability_ {
    SpirvCapabilityMatrix = 0,
    SpirvCapabilityShader = 1,
    SpirvCapabilityGeometry = 2,
    SpirvCapabilityTessellation = 3,
    SpirvCapabilityAddresses = 4,
    SpirvCapabilityLinkage = 5,
    SpirvCapabilityKernel = 6,
    SpirvCapabilityVector16 = 7,
    SpirvCapabilityFloat16Buffer = 8,
    SpirvCapabilityFloat16 = 9,
    SpirvCapabilityFloat64 = 10,
    SpirvCapabilityInt64 = 11,
    SpirvCapabilityInt64Atomics = 12,
    SpirvCapabilityImageBasic = 13,
    SpirvCapabilityImageReadWrite = 14,
    SpirvCapabilityImageMipmap = 15,
    SpirvCapabilityPipes = 17,
    SpirvCapabilityGroups = 18,
    SpirvCapabilityDeviceEnqueue = 19,
    SpirvCapabilityLiteralSampler = 20,
    SpirvCapabilityAtomicStorage = 21,
    SpirvCapabilityInt16 = 22,
    SpirvCapabilityTessellationPointSize = 23,
    SpirvCapabilityGeometryPointSize = 24,
    SpirvCapabilityImageGatherExtended = 25,
    SpirvCapabilityStorageImageMultisample = 27,
    SpirvCapabilityUniformBufferArrayDynamicIndexing = 28,
    SpirvCapabilitySampledImageArrayDynamicIndexing = 29,
    SpirvCapabilityStorageBufferArrayDynamicIndexing = 30,
    SpirvCapabilityStorageImageArrayDynamicIndexing = 31,
    SpirvCapabilityClipDistance = 32,
    SpirvCapabilityCullDistance = 33,
    SpirvCapabilityImageCubeArray = 34,
    SpirvCapabilitySampleRateShading = 35,
    SpirvCapabilityImageRect = 36,
    SpirvCapabilitySampledRect = 37,
    SpirvCapabilityGenericPointer = 38,
    SpirvCapabilityInt8 = 39,
    SpirvCapabilityInputAttachment = 40,
    SpirvCapabilitySparseResidency = 41,
    SpirvCapabilityMinLod = 42,
    SpirvCapabilitySampled1D = 43,
    SpirvCapabilityImage1D = 44,
    SpirvCapabilitySampledCubeArray = 45,
    SpirvCapabilitySampledBuffer = 46,
    SpirvCapabilityImageBuffer = 47,
    SpirvCapabilityImageMSArray = 48,
    SpirvCapabilityStorageImageExtendedFormats = 49,
    SpirvCapabilityImageQuery = 50,
    SpirvCapabilityDerivativeControl = 51,
    SpirvCapabilityInterpolationFunction = 52,
    SpirvCapabilityTransformFeedback = 53,
    SpirvCapabilityGeometryStreams = 54,
    SpirvCapabilityStorageImageReadWithoutFormat = 55,
    SpirvCapabilityStorageImageWriteWithoutFormat = 56,
    SpirvCapabilityMultiViewport = 57,
    SpirvCapabilitySubgroupDispatch = 58,
    SpirvCapabilityNamedBarrier = 59,
    SpirvCapabilityPipeStorage = 60,
    SpirvCapabilityGroupNonUniform = 61,
    SpirvCapabilityGroupNonUniformVote = 62,
    SpirvCapabilityGroupNonUniformArithmetic = 63,
    SpirvCapabilityGroupNonUniformBallot = 64,
    SpirvCapabilityGroupNonUniformShuffle = 65,
    SpirvCapabilityGroupNonUniformShuffleRelative = 66,
    SpirvCapabilityGroupNonUniformClustered = 67,
    SpirvCapabilityGroupNonUniformQuad = 68,
    SpirvCapabilityShaderLayer = 69,
    SpirvCapabilityShaderViewportIndex = 70,
    SpirvCapabilityUniformDecoration = 71,
    SpirvCapabilityCoreBuiltinsARM = 4165,
    SpirvCapabilityTileImageColorReadAccessEXT = 4166,
    SpirvCapabilityTileImageDepthReadAccessEXT = 4167,
    SpirvCapabilityTileImageStencilReadAccessEXT = 4168,
    SpirvCapabilityFragmentShadingRateKHR = 4422,
    SpirvCapabilitySubgroupBallotKHR = 4423,
    SpirvCapabilityDrawParameters = 4427,
    SpirvCapabilityWorkgroupMemoryExplicitLayoutKHR = 4428,
    SpirvCapabilityWorkgroupMemoryExplicitLayout8BitAccessKHR = 4429,
    SpirvCapabilityWorkgroupMemoryExplicitLayout16BitAccessKHR = 4430,
    SpirvCapabilitySubgroupVoteKHR = 4431,
    SpirvCapabilityStorageBuffer16BitAccess = 4433,
    SpirvCapabilityStorageUniformBufferBlock16 = 4433,
    SpirvCapabilityStorageUniform16 = 4434,
    SpirvCapabilityUniformAndStorageBuffer16BitAccess = 4434,
    SpirvCapabilityStoragePushConstant16 = 4435,
    SpirvCapabilityStorageInputOutput16 = 4436,
    SpirvCapabilityDeviceGroup = 4437,
    SpirvCapabilityMultiView = 4439,
    SpirvCapabilityVariablePointersStorageBuffer = 4441,
    SpirvCapabilityVariablePointers = 4442,
    SpirvCapabilityAtomicStorageOps = 4445,
    SpirvCapabilitySampleMaskPostDepthCoverage = 4447,
    SpirvCapabilityStorageBuffer8BitAccess = 4448,
    SpirvCapabilityUniformAndStorageBuffer8BitAccess = 4449,
    SpirvCapabilityStoragePushConstant8 = 4450,
    SpirvCapabilityDenormPreserve = 4464,
    SpirvCapabilityDenormFlushToZero = 4465,
    SpirvCapabilitySignedZeroInfNanPreserve = 4466,
    SpirvCapabilityRoundingModeRTE = 4467,
    SpirvCapabilityRoundingModeRTZ = 4468,
    SpirvCapabilityRayQueryProvisionalKHR = 4471,
    SpirvCapabilityRayQueryKHR = 4472,
    SpirvCapabilityRayTraversalPrimitiveCullingKHR = 4478,
    SpirvCapabilityRayTracingKHR = 4479,
    SpirvCapabilityTextureSampleWeightedQCOM = 4484,
    SpirvCapabilityTextureBoxFilterQCOM = 4485,
    SpirvCapabilityTextureBlockMatchQCOM = 4486,
    SpirvCapabilityFloat16ImageAMD = 5008,
    SpirvCapabilityImageGatherBiasLodAMD = 5009,
    SpirvCapabilityFragmentMaskAMD = 5010,
    SpirvCapabilityStencilExportEXT = 5013,
    SpirvCapabilityImageReadWriteLodAMD = 5015,
    SpirvCapabilityInt64ImageEXT = 5016,
    SpirvCapabilityShaderClockKHR = 5055,
    SpirvCapabilityShaderEnqueueAMDX = 5067,
    SpirvCapabilitySampleMaskOverrideCoverageNV = 5249,
    SpirvCapabilityGeometryShaderPassthroughNV = 5251,
    SpirvCapabilityShaderViewportIndexLayerEXT = 5254,
    SpirvCapabilityShaderViewportIndexLayerNV = 5254,
    SpirvCapabilityShaderViewportMaskNV = 5255,
    SpirvCapabilityShaderStereoViewNV = 5259,
    SpirvCapabilityPerViewAttributesNV = 5260,
    SpirvCapabilityFragmentFullyCoveredEXT = 5265,
    SpirvCapabilityMeshShadingNV = 5266,
    SpirvCapabilityImageFootprintNV = 5282,
    SpirvCapabilityMeshShadingEXT = 5283,
    SpirvCapabilityFragmentBarycentricKHR = 5284,
    SpirvCapabilityFragmentBarycentricNV = 5284,
    SpirvCapabilityComputeDerivativeGroupQuadsNV = 5288,
    SpirvCapabilityFragmentDensityEXT = 5291,
    SpirvCapabilityShadingRateNV = 5291,
    SpirvCapabilityGroupNonUniformPartitionedNV = 5297,
    SpirvCapabilityShaderNonUniform = 5301,
    SpirvCapabilityShaderNonUniformEXT = 5301,
    SpirvCapabilityRuntimeDescriptorArray = 5302,
    SpirvCapabilityRuntimeDescriptorArrayEXT = 5302,
    SpirvCapabilityInputAttachmentArrayDynamicIndexing = 5303,
    SpirvCapabilityInputAttachmentArrayDynamicIndexingEXT = 5303,
    SpirvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304,
    SpirvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304,
    SpirvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305,
    SpirvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305,
    SpirvCapabilityUniformBufferArrayNonUniformIndexing = 5306,
    SpirvCapabilityUniformBufferArrayNonUniformIndexingEXT = 5306,
    SpirvCapabilitySampledImageArrayNonUniformIndexing = 5307,
    SpirvCapabilitySampledImageArrayNonUniformIndexingEXT = 5307,
    SpirvCapabilityStorageBufferArrayNonUniformIndexing = 5308,
    SpirvCapabilityStorageBufferArrayNonUniformIndexingEXT = 5308,
    SpirvCapabilityStorageImageArrayNonUniformIndexing = 5309,
    SpirvCapabilityStorageImageArrayNonUniformIndexingEXT = 5309,
    SpirvCapabilityInputAttachmentArrayNonUniformIndexing = 5310,
    SpirvCapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310,
    SpirvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,
    SpirvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311,
    SpirvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,
    SpirvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312,
    SpirvCapabilityRayTracingPositionFetchKHR = 5336,
    SpirvCapabilityRayTracingNV = 5340,
    SpirvCapabilityRayTracingMotionBlurNV = 5341,
    SpirvCapabilityVulkanMemoryModel = 5345,
    SpirvCapabilityVulkanMemoryModelKHR = 5345,
    SpirvCapabilityVulkanMemoryModelDeviceScope = 5346,
    SpirvCapabilityVulkanMemoryModelDeviceScopeKHR = 5346,
    SpirvCapabilityPhysicalStorageBufferAddresses = 5347,
    SpirvCapabilityPhysicalStorageBufferAddressesEXT = 5347,
    SpirvCapabilityComputeDerivativeGroupLinearNV = 5350,
    SpirvCapabilityRayTracingProvisionalKHR = 5353,
    SpirvCapabilityCooperativeMatrixNV = 5357,
    SpirvCapabilityFragmentShaderSampleInterlockEXT = 5363,
    SpirvCapabilityFragmentShaderShadingRateInterlockEXT = 5372,
    SpirvCapabilityShaderSMBuiltinsNV = 5373,
    SpirvCapabilityFragmentShaderPixelInterlockEXT = 5378,
    SpirvCapabilityDemoteToHelperInvocation = 5379,
    SpirvCapabilityDemoteToHelperInvocationEXT = 5379,
    SpirvCapabilityDisplacementMicromapNV = 5380,
    SpirvCapabilityRayTracingOpacityMicromapEXT = 5381,
    SpirvCapabilityShaderInvocationReorderNV = 5383,
    SpirvCapabilityBindlessTextureNV = 5390,
    SpirvCapabilityRayQueryPositionFetchKHR = 5391,
    SpirvCapabilityRayTracingDisplacementMicromapNV = 5409,
    SpirvCapabilitySubgroupShuffleINTEL = 5568,
    SpirvCapabilitySubgroupBufferBlockIOINTEL = 5569,
    SpirvCapabilitySubgroupImageBlockIOINTEL = 5570,
    SpirvCapabilitySubgroupImageMediaBlockIOINTEL = 5579,
    SpirvCapabilityRoundToInfinityINTEL = 5582,
    SpirvCapabilityFloatingPointModeINTEL = 5583,
    SpirvCapabilityIntegerFunctions2INTEL = 5584,
    SpirvCapabilityFunctionPointersINTEL = 5603,
    SpirvCapabilityIndirectReferencesINTEL = 5604,
    SpirvCapabilityAsmINTEL = 5606,
    SpirvCapabilityAtomicFloat32MinMaxEXT = 5612,
    SpirvCapabilityAtomicFloat64MinMaxEXT = 5613,
    SpirvCapabilityAtomicFloat16MinMaxEXT = 5616,
    SpirvCapabilityVectorComputeINTEL = 5617,
    SpirvCapabilityVectorAnyINTEL = 5619,
    SpirvCapabilityExpectAssumeKHR = 5629,
    SpirvCapabilitySubgroupAvcMotionEstimationINTEL = 5696,
    SpirvCapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697,
    SpirvCapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698,
    SpirvCapabilityVariableLengthArrayINTEL = 5817,
    SpirvCapabilityFunctionFloatControlINTEL = 5821,
    SpirvCapabilityFPGAMemoryAttributesINTEL = 5824,
    SpirvCapabilityFPFastMathModeINTEL = 5837,
    SpirvCapabilityArbitraryPrecisionIntegersINTEL = 5844,
    SpirvCapabilityArbitraryPrecisionFloatingPointINTEL = 5845,
    SpirvCapabilityUnstructuredLoopControlsINTEL = 5886,
    SpirvCapabilityFPGALoopControlsINTEL = 5888,
    SpirvCapabilityKernelAttributesINTEL = 5892,
    SpirvCapabilityFPGAKernelAttributesINTEL = 5897,
    SpirvCapabilityFPGAMemoryAccessesINTEL = 5898,
    SpirvCapabilityFPGAClusterAttributesINTEL = 5904,
    SpirvCapabilityLoopFuseINTEL = 5906,
    SpirvCapabilityFPGADSPControlINTEL = 5908,
    SpirvCapabilityMemoryAccessAliasingINTEL = 5910,
    SpirvCapabilityFPGAInvocationPipeliningAttributesINTEL = 5916,
    SpirvCapabilityFPGABufferLocationINTEL = 5920,
    SpirvCapabilityArbitraryPrecisionFixedPointINTEL = 5922,
    SpirvCapabilityUSMStorageClassesINTEL = 5935,
    SpirvCapabilityRuntimeAlignedAttributeINTEL = 5939,
    SpirvCapabilityIOPipesINTEL = 5943,
    SpirvCapabilityBlockingPipesINTEL = 5945,
    SpirvCapabilityFPGARegINTEL = 5948,
    SpirvCapabilityDotProductInputAll = 6016,
    SpirvCapabilityDotProductInputAllKHR = 6016,
    SpirvCapabilityDotProductInput4x8Bit = 6017,
    SpirvCapabilityDotProductInput4x8BitKHR = 6017,
    SpirvCapabilityDotProductInput4x8BitPacked = 6018,
    SpirvCapabilityDotProductInput4x8BitPackedKHR = 6018,
    SpirvCapabilityDotProduct = 6019,
    SpirvCapabilityDotProductKHR = 6019,
    SpirvCapabilityRayCullMaskKHR = 6020,
    SpirvCapabilityCooperativeMatrixKHR = 6022,
    SpirvCapabilityBitInstructions = 6025,
    SpirvCapabilityGroupNonUniformRotateKHR = 6026,
    SpirvCapabilityAtomicFloat32AddEXT = 6033,
    SpirvCapabilityAtomicFloat64AddEXT = 6034,
    SpirvCapabilityLongCompositesINTEL = 6089,
    SpirvCapabilityOptNoneINTEL = 6094,
    SpirvCapabilityAtomicFloat16AddEXT = 6095,
    SpirvCapabilityDebugInfoModuleINTEL = 6114,
    SpirvCapabilityBFloat16ConversionINTEL = 6115,
    SpirvCapabilitySplitBarrierINTEL = 6141,
    SpirvCapabilityFPGAClusterAttributesV2INTEL = 6150,
    SpirvCapabilityFPGAKernelAttributesv2INTEL = 6161,
    SpirvCapabilityFPMaxErrorINTEL = 6169,
    SpirvCapabilityFPGALatencyControlINTEL = 6171,
    SpirvCapabilityFPGAArgumentInterfacesINTEL = 6174,
    SpirvCapabilityGlobalVariableHostAccessINTEL = 6187,
    SpirvCapabilityGlobalVariableFPGADecorationsINTEL = 6189,
    SpirvCapabilityGroupUniformArithmeticKHR = 6400,
    SpirvCapabilityCacheControlsINTEL = 6441,
    SpirvCapabilityMax = 0x7fffffff,
} SpirvCapability;

typedef enum SpirvRayFlagsShift_ {
    SpirvRayFlagsOpaqueKHRShift = 0,
    SpirvRayFlagsNoOpaqueKHRShift = 1,
    SpirvRayFlagsTerminateOnFirstHitKHRShift = 2,
    SpirvRayFlagsSkipClosestHitShaderKHRShift = 3,
    SpirvRayFlagsCullBackFacingTrianglesKHRShift = 4,
    SpirvRayFlagsCullFrontFacingTrianglesKHRShift = 5,
    SpirvRayFlagsCullOpaqueKHRShift = 6,
    SpirvRayFlagsCullNoOpaqueKHRShift = 7,
    SpirvRayFlagsSkipTrianglesKHRShift = 8,
    SpirvRayFlagsSkipAABBsKHRShift = 9,
    SpirvRayFlagsForceOpacityMicromap2StateEXTShift = 10,
    SpirvRayFlagsMax = 0x7fffffff,
} SpirvRayFlagsShift;

typedef enum SpirvRayFlagsMask_ {
    SpirvRayFlagsMaskNone = 0,
    SpirvRayFlagsOpaqueKHRMask = 0x00000001,
    SpirvRayFlagsNoOpaqueKHRMask = 0x00000002,
    SpirvRayFlagsTerminateOnFirstHitKHRMask = 0x00000004,
    SpirvRayFlagsSkipClosestHitShaderKHRMask = 0x00000008,
    SpirvRayFlagsCullBackFacingTrianglesKHRMask = 0x00000010,
    SpirvRayFlagsCullFrontFacingTrianglesKHRMask = 0x00000020,
    SpirvRayFlagsCullOpaqueKHRMask = 0x00000040,
    SpirvRayFlagsCullNoOpaqueKHRMask = 0x00000080,
    SpirvRayFlagsSkipTrianglesKHRMask = 0x00000100,
    SpirvRayFlagsSkipAABBsKHRMask = 0x00000200,
    SpirvRayFlagsForceOpacityMicromap2StateEXTMask = 0x00000400,
} SpirvRayFlagsMask;

typedef enum SpirvRayQueryIntersection_ {
    SpirvRayQueryIntersectionRayQueryCandidateIntersectionKHR = 0,
    SpirvRayQueryIntersectionRayQueryCommittedIntersectionKHR = 1,
    SpirvRayQueryIntersectionMax = 0x7fffffff,
} SpirvRayQueryIntersection;

typedef enum SpirvRayQueryCommittedIntersectionType_ {
    SpirvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = 0,
    SpirvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = 1,
    SpirvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = 2,
    SpirvRayQueryCommittedIntersectionTypeMax = 0x7fffffff,
} SpirvRayQueryCommittedIntersectionType;

typedef enum SpirvRayQueryCandidateIntersectionType_ {
    SpirvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = 0,
    SpirvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = 1,
    SpirvRayQueryCandidateIntersectionTypeMax = 0x7fffffff,
} SpirvRayQueryCandidateIntersectionType;

typedef enum SpirvFragmentShadingRateShift_ {
    SpirvFragmentShadingRateVertical2PixelsShift = 0,
    SpirvFragmentShadingRateVertical4PixelsShift = 1,
    SpirvFragmentShadingRateHorizontal2PixelsShift = 2,
    SpirvFragmentShadingRateHorizontal4PixelsShift = 3,
    SpirvFragmentShadingRateMax = 0x7fffffff,
} SpirvFragmentShadingRateShift;

typedef enum SpirvFragmentShadingRateMask_ {
    SpirvFragmentShadingRateMaskNone = 0,
    SpirvFragmentShadingRateVertical2PixelsMask = 0x00000001,
    SpirvFragmentShadingRateVertical4PixelsMask = 0x00000002,
    SpirvFragmentShadingRateHorizontal2PixelsMask = 0x00000004,
    SpirvFragmentShadingRateHorizontal4PixelsMask = 0x00000008,
} SpirvFragmentShadingRateMask;

typedef enum SpirvFPDenormMode_ {
    SpirvFPDenormModePreserve = 0,
    SpirvFPDenormModeFlushToZero = 1,
    SpirvFPDenormModeMax = 0x7fffffff,
} SpirvFPDenormMode;

typedef enum SpirvFPOperationMode_ {
    SpirvFPOperationModeIEEE = 0,
    SpirvFPOperationModeALT = 1,
    SpirvFPOperationModeMax = 0x7fffffff,
} SpirvFPOperationMode;

typedef enum SpirvQuantizationModes_ {
    SpirvQuantizationModesTRN = 0,
    SpirvQuantizationModesTRN_ZERO = 1,
    SpirvQuantizationModesRND = 2,
    SpirvQuantizationModesRND_ZERO = 3,
    SpirvQuantizationModesRND_INF = 4,
    SpirvQuantizationModesRND_MIN_INF = 5,
    SpirvQuantizationModesRND_CONV = 6,
    SpirvQuantizationModesRND_CONV_ODD = 7,
    SpirvQuantizationModesMax = 0x7fffffff,
} SpirvQuantizationModes;

typedef enum SpirvOverflowModes_ {
    SpirvOverflowModesWRAP = 0,
    SpirvOverflowModesSAT = 1,
    SpirvOverflowModesSAT_ZERO = 2,
    SpirvOverflowModesSAT_SYM = 3,
    SpirvOverflowModesMax = 0x7fffffff,
} SpirvOverflowModes;

typedef enum SpirvPackedVectorFormat_ {
    SpirvPackedVectorFormatPackedVectorFormat4x8Bit = 0,
    SpirvPackedVectorFormatPackedVectorFormat4x8BitKHR = 0,
    SpirvPackedVectorFormatMax = 0x7fffffff,
} SpirvPackedVectorFormat;

typedef enum SpirvCooperativeMatrixOperandsShift_ {
    SpirvCooperativeMatrixOperandsMatrixASignedComponentsKHRShift = 0,
    SpirvCooperativeMatrixOperandsMatrixBSignedComponentsKHRShift = 1,
    SpirvCooperativeMatrixOperandsMatrixCSignedComponentsKHRShift = 2,
    SpirvCooperativeMatrixOperandsMatrixResultSignedComponentsKHRShift = 3,
    SpirvCooperativeMatrixOperandsSaturatingAccumulationKHRShift = 4,
    SpirvCooperativeMatrixOperandsMax = 0x7fffffff,
} SpirvCooperativeMatrixOperandsShift;

typedef enum SpirvCooperativeMatrixOperandsMask_ {
    SpirvCooperativeMatrixOperandsMaskNone = 0,
    SpirvCooperativeMatrixOperandsMatrixASignedComponentsKHRMask = 0x00000001,
    SpirvCooperativeMatrixOperandsMatrixBSignedComponentsKHRMask = 0x00000002,
    SpirvCooperativeMatrixOperandsMatrixCSignedComponentsKHRMask = 0x00000004,
    SpirvCooperativeMatrixOperandsMatrixResultSignedComponentsKHRMask = 0x00000008,
    SpirvCooperativeMatrixOperandsSaturatingAccumulationKHRMask = 0x00000010,
} SpirvCooperativeMatrixOperandsMask;

typedef enum SpirvCooperativeMatrixLayout_ {
    SpirvCooperativeMatrixLayoutRowMajorKHR = 0,
    SpirvCooperativeMatrixLayoutColumnMajorKHR = 1,
    SpirvCooperativeMatrixLayoutMax = 0x7fffffff,
} SpirvCooperativeMatrixLayout;

typedef enum SpirvCooperativeMatrixUse_ {
    SpirvCooperativeMatrixUseMatrixAKHR = 0,
    SpirvCooperativeMatrixUseMatrixBKHR = 1,
    SpirvCooperativeMatrixUseMatrixAccumulatorKHR = 2,
    SpirvCooperativeMatrixUseMax = 0x7fffffff,
} SpirvCooperativeMatrixUse;

typedef enum SpirvInitializationModeQualifier_ {
    SpirvInitializationModeQualifierInitOnDeviceReprogramINTEL = 0,
    SpirvInitializationModeQualifierInitOnDeviceResetINTEL = 1,
    SpirvInitializationModeQualifierMax = 0x7fffffff,
} SpirvInitializationModeQualifier;

typedef enum SpirvHostAccessQualifier_ {
    SpirvHostAccessQualifierNoneINTEL = 0,
    SpirvHostAccessQualifierReadINTEL = 1,
    SpirvHostAccessQualifierWriteINTEL = 2,
    SpirvHostAccessQualifierReadWriteINTEL = 3,
    SpirvHostAccessQualifierMax = 0x7fffffff,
} SpirvHostAccessQualifier;

typedef enum SpirvLoadCacheControl_ {
    SpirvLoadCacheControlUncachedINTEL = 0,
    SpirvLoadCacheControlCachedINTEL = 1,
    SpirvLoadCacheControlStreamingINTEL = 2,
    SpirvLoadCacheControlInvalidateAfterReadINTEL = 3,
    SpirvLoadCacheControlConstCachedINTEL = 4,
    SpirvLoadCacheControlMax = 0x7fffffff,
} SpirvLoadCacheControl;

typedef enum SpirvStoreCacheControl_ {
    SpirvStoreCacheControlUncachedINTEL = 0,
    SpirvStoreCacheControlWriteThroughINTEL = 1,
    SpirvStoreCacheControlWriteBackINTEL = 2,
    SpirvStoreCacheControlStreamingINTEL = 3,
    SpirvStoreCacheControlMax = 0x7fffffff,
} SpirvStoreCacheControl;

typedef enum SpirvOp_ {
    SpirvOpNop = 0,
    SpirvOpUndef = 1,
    SpirvOpSourceContinued = 2,
    SpirvOpSource = 3,
    SpirvOpSourceExtension = 4,
    SpirvOpName = 5,
    SpirvOpMemberName = 6,
    SpirvOpString = 7,
    SpirvOpLine = 8,
    SpirvOpExtension = 10,
    SpirvOpExtInstImport = 11,
    SpirvOpExtInst = 12,
    SpirvOpMemoryModel = 14,
    SpirvOpEntryPoint = 15,
    SpirvOpExecutionMode = 16,
    SpirvOpCapability = 17,
    SpirvOpTypeVoid = 19,
    SpirvOpTypeBool = 20,
    SpirvOpTypeInt = 21,
    SpirvOpTypeFloat = 22,
    SpirvOpTypeVector = 23,
    SpirvOpTypeMatrix = 24,
    SpirvOpTypeImage = 25,
    SpirvOpTypeSampler = 26,
    SpirvOpTypeSampledImage = 27,
    SpirvOpTypeArray = 28,
    SpirvOpTypeRuntimeArray = 29,
    SpirvOpTypeStruct = 30,
    SpirvOpTypeOpaque = 31,
    SpirvOpTypePointer = 32,
    SpirvOpTypeFunction = 33,
    SpirvOpTypeEvent = 34,
    SpirvOpTypeDeviceEvent = 35,
    SpirvOpTypeReserveId = 36,
    SpirvOpTypeQueue = 37,
    SpirvOpTypePipe = 38,
    SpirvOpTypeForwardPointer = 39,
    SpirvOpConstantTrue = 41,
    SpirvOpConstantFalse = 42,
    SpirvOpConstant = 43,
    SpirvOpConstantComposite = 44,
    SpirvOpConstantSampler = 45,
    SpirvOpConstantNull = 46,
    SpirvOpSpecConstantTrue = 48,
    SpirvOpSpecConstantFalse = 49,
    SpirvOpSpecConstant = 50,
    SpirvOpSpecConstantComposite = 51,
    SpirvOpSpecConstantOp = 52,
    SpirvOpFunction = 54,
    SpirvOpFunctionParameter = 55,
    SpirvOpFunctionEnd = 56,
    SpirvOpFunctionCall = 57,
    SpirvOpVariable = 59,
    SpirvOpImageTexelPointer = 60,
    SpirvOpLoad = 61,
    SpirvOpStore = 62,
    SpirvOpCopyMemory = 63,
    SpirvOpCopyMemorySized = 64,
    SpirvOpAccessChain = 65,
    SpirvOpInBoundsAccessChain = 66,
    SpirvOpPtrAccessChain = 67,
    SpirvOpArrayLength = 68,
    SpirvOpGenericPtrMemSemantics = 69,
    SpirvOpInBoundsPtrAccessChain = 70,
    SpirvOpDecorate = 71,
    SpirvOpMemberDecorate = 72,
    SpirvOpDecorationGroup = 73,
    SpirvOpGroupDecorate = 74,
    SpirvOpGroupMemberDecorate = 75,
    SpirvOpVectorExtractDynamic = 77,
    SpirvOpVectorInsertDynamic = 78,
    SpirvOpVectorShuffle = 79,
    SpirvOpCompositeConstruct = 80,
    SpirvOpCompositeExtract = 81,
    SpirvOpCompositeInsert = 82,
    SpirvOpCopyObject = 83,
    SpirvOpTranspose = 84,
    SpirvOpSampledImage = 86,
    SpirvOpImageSampleImplicitLod = 87,
    SpirvOpImageSampleExplicitLod = 88,
    SpirvOpImageSampleDrefImplicitLod = 89,
    SpirvOpImageSampleDrefExplicitLod = 90,
    SpirvOpImageSampleProjImplicitLod = 91,
    SpirvOpImageSampleProjExplicitLod = 92,
    SpirvOpImageSampleProjDrefImplicitLod = 93,
    SpirvOpImageSampleProjDrefExplicitLod = 94,
    SpirvOpImageFetch = 95,
    SpirvOpImageGather = 96,
    SpirvOpImageDrefGather = 97,
    SpirvOpImageRead = 98,
    SpirvOpImageWrite = 99,
    SpirvOpImage = 100,
    SpirvOpImageQueryFormat = 101,
    SpirvOpImageQueryOrder = 102,
    SpirvOpImageQuerySizeLod = 103,
    SpirvOpImageQuerySize = 104,
    SpirvOpImageQueryLod = 105,
    SpirvOpImageQueryLevels = 106,
    SpirvOpImageQuerySamples = 107,
    SpirvOpConvertFToU = 109,
    SpirvOpConvertFToS = 110,
    SpirvOpConvertSToF = 111,
    SpirvOpConvertUToF = 112,
    SpirvOpUConvert = 113,
    SpirvOpSConvert = 114,
    SpirvOpFConvert = 115,
    SpirvOpQuantizeToF16 = 116,
    SpirvOpConvertPtrToU = 117,
    SpirvOpSatConvertSToU = 118,
    SpirvOpSatConvertUToS = 119,
    SpirvOpConvertUToPtr = 120,
    SpirvOpPtrCastToGeneric = 121,
    SpirvOpGenericCastToPtr = 122,
    SpirvOpGenericCastToPtrExplicit = 123,
    SpirvOpBitcast = 124,
    SpirvOpSNegate = 126,
    SpirvOpFNegate = 127,
    SpirvOpIAdd = 128,
    SpirvOpFAdd = 129,
    SpirvOpISub = 130,
    SpirvOpFSub = 131,
    SpirvOpIMul = 132,
    SpirvOpFMul = 133,
    SpirvOpUDiv = 134,
    SpirvOpSDiv = 135,
    SpirvOpFDiv = 136,
    SpirvOpUMod = 137,
    SpirvOpSRem = 138,
    SpirvOpSMod = 139,
    SpirvOpFRem = 140,
    SpirvOpFMod = 141,
    SpirvOpVectorTimesScalar = 142,
    SpirvOpMatrixTimesScalar = 143,
    SpirvOpVectorTimesMatrix = 144,
    SpirvOpMatrixTimesVector = 145,
    SpirvOpMatrixTimesMatrix = 146,
    SpirvOpOuterProduct = 147,
    SpirvOpDot = 148,
    SpirvOpIAddCarry = 149,
    SpirvOpISubBorrow = 150,
    SpirvOpUMulExtended = 151,
    SpirvOpSMulExtended = 152,
    SpirvOpAny = 154,
    SpirvOpAll = 155,
    SpirvOpIsNan = 156,
    SpirvOpIsInf = 157,
    SpirvOpIsFinite = 158,
    SpirvOpIsNormal = 159,
    SpirvOpSignBitSet = 160,
    SpirvOpLessOrGreater = 161,
    SpirvOpOrdered = 162,
    SpirvOpUnordered = 163,
    SpirvOpLogicalEqual = 164,
    SpirvOpLogicalNotEqual = 165,
    SpirvOpLogicalOr = 166,
    SpirvOpLogicalAnd = 167,
    SpirvOpLogicalNot = 168,
    SpirvOpSelect = 169,
    SpirvOpIEqual = 170,
    SpirvOpINotEqual = 171,
    SpirvOpUGreaterThan = 172,
    SpirvOpSGreaterThan = 173,
    SpirvOpUGreaterThanEqual = 174,
    SpirvOpSGreaterThanEqual = 175,
    SpirvOpULessThan = 176,
    SpirvOpSLessThan = 177,
    SpirvOpULessThanEqual = 178,
    SpirvOpSLessThanEqual = 179,
    SpirvOpFOrdEqual = 180,
    SpirvOpFUnordEqual = 181,
    SpirvOpFOrdNotEqual = 182,
    SpirvOpFUnordNotEqual = 183,
    SpirvOpFOrdLessThan = 184,
    SpirvOpFUnordLessThan = 185,
    SpirvOpFOrdGreaterThan = 186,
    SpirvOpFUnordGreaterThan = 187,
    SpirvOpFOrdLessThanEqual = 188,
    SpirvOpFUnordLessThanEqual = 189,
    SpirvOpFOrdGreaterThanEqual = 190,
    SpirvOpFUnordGreaterThanEqual = 191,
    SpirvOpShiftRightLogical = 194,
    SpirvOpShiftRightArithmetic = 195,
    SpirvOpShiftLeftLogical = 196,
    SpirvOpBitwiseOr = 197,
    SpirvOpBitwiseXor = 198,
    SpirvOpBitwiseAnd = 199,
    SpirvOpNot = 200,
    SpirvOpBitFieldInsert = 201,
    SpirvOpBitFieldSExtract = 202,
    SpirvOpBitFieldUExtract = 203,
    SpirvOpBitReverse = 204,
    SpirvOpBitCount = 205,
    SpirvOpDPdx = 207,
    SpirvOpDPdy = 208,
    SpirvOpFwidth = 209,
    SpirvOpDPdxFine = 210,
    SpirvOpDPdyFine = 211,
    SpirvOpFwidthFine = 212,
    SpirvOpDPdxCoarse = 213,
    SpirvOpDPdyCoarse = 214,
    SpirvOpFwidthCoarse = 215,
    SpirvOpEmitVertex = 218,
    SpirvOpEndPrimitive = 219,
    SpirvOpEmitStreamVertex = 220,
    SpirvOpEndStreamPrimitive = 221,
    SpirvOpControlBarrier = 224,
    SpirvOpMemoryBarrier = 225,
    SpirvOpAtomicLoad = 227,
    SpirvOpAtomicStore = 228,
    SpirvOpAtomicExchange = 229,
    SpirvOpAtomicCompareExchange = 230,
    SpirvOpAtomicCompareExchangeWeak = 231,
    SpirvOpAtomicIIncrement = 232,
    SpirvOpAtomicIDecrement = 233,
    SpirvOpAtomicIAdd = 234,
    SpirvOpAtomicISub = 235,
    SpirvOpAtomicSMin = 236,
    SpirvOpAtomicUMin = 237,
    SpirvOpAtomicSMax = 238,
    SpirvOpAtomicUMax = 239,
    SpirvOpAtomicAnd = 240,
    SpirvOpAtomicOr = 241,
    SpirvOpAtomicXor = 242,
    SpirvOpPhi = 245,
    SpirvOpLoopMerge = 246,
    SpirvOpSelectionMerge = 247,
    SpirvOpLabel = 248,
    SpirvOpBranch = 249,
    SpirvOpBranchConditional = 250,
    SpirvOpSwitch = 251,
    SpirvOpKill = 252,
    SpirvOpReturn = 253,
    SpirvOpReturnValue = 254,
    SpirvOpUnreachable = 255,
    SpirvOpLifetimeStart = 256,
    SpirvOpLifetimeStop = 257,
    SpirvOpGroupAsyncCopy = 259,
    SpirvOpGroupWaitEvents = 260,
    SpirvOpGroupAll = 261,
    SpirvOpGroupAny = 262,
    SpirvOpGroupBroadcast = 263,
    SpirvOpGroupIAdd = 264,
    SpirvOpGroupFAdd = 265,
    SpirvOpGroupFMin = 266,
    SpirvOpGroupUMin = 267,
    SpirvOpGroupSMin = 268,
    SpirvOpGroupFMax = 269,
    SpirvOpGroupUMax = 270,
    SpirvOpGroupSMax = 271,
    SpirvOpReadPipe = 274,
    SpirvOpWritePipe = 275,
    SpirvOpReservedReadPipe = 276,
    SpirvOpReservedWritePipe = 277,
    SpirvOpReserveReadPipePackets = 278,
    SpirvOpReserveWritePipePackets = 279,
    SpirvOpCommitReadPipe = 280,
    SpirvOpCommitWritePipe = 281,
    SpirvOpIsValidReserveId = 282,
    SpirvOpGetNumPipePackets = 283,
    SpirvOpGetMaxPipePackets = 284,
    SpirvOpGroupReserveReadPipePackets = 285,
    SpirvOpGroupReserveWritePipePackets = 286,
    SpirvOpGroupCommitReadPipe = 287,
    SpirvOpGroupCommitWritePipe = 288,
    SpirvOpEnqueueMarker = 291,
    SpirvOpEnqueueKernel = 292,
    SpirvOpGetKernelNDrangeSubGroupCount = 293,
    SpirvOpGetKernelNDrangeMaxSubGroupSize = 294,
    SpirvOpGetKernelWorkGroupSize = 295,
    SpirvOpGetKernelPreferredWorkGroupSizeMultiple = 296,
    SpirvOpRetainEvent = 297,
    SpirvOpReleaseEvent = 298,
    SpirvOpCreateUserEvent = 299,
    SpirvOpIsValidEvent = 300,
    SpirvOpSetUserEventStatus = 301,
    SpirvOpCaptureEventProfilingInfo = 302,
    SpirvOpGetDefaultQueue = 303,
    SpirvOpBuildNDRange = 304,
    SpirvOpImageSparseSampleImplicitLod = 305,
    SpirvOpImageSparseSampleExplicitLod = 306,
    SpirvOpImageSparseSampleDrefImplicitLod = 307,
    SpirvOpImageSparseSampleDrefExplicitLod = 308,
    SpirvOpImageSparseSampleProjImplicitLod = 309,
    SpirvOpImageSparseSampleProjExplicitLod = 310,
    SpirvOpImageSparseSampleProjDrefImplicitLod = 311,
    SpirvOpImageSparseSampleProjDrefExplicitLod = 312,
    SpirvOpImageSparseFetch = 313,
    SpirvOpImageSparseGather = 314,
    SpirvOpImageSparseDrefGather = 315,
    SpirvOpImageSparseTexelsResident = 316,
    SpirvOpNoLine = 317,
    SpirvOpAtomicFlagTestAndSet = 318,
    SpirvOpAtomicFlagClear = 319,
    SpirvOpImageSparseRead = 320,
    SpirvOpSizeOf = 321,
    SpirvOpTypePipeStorage = 322,
    SpirvOpConstantPipeStorage = 323,
    SpirvOpCreatePipeFromPipeStorage = 324,
    SpirvOpGetKernelLocalSizeForSubgroupCount = 325,
    SpirvOpGetKernelMaxNumSubgroups = 326,
    SpirvOpTypeNamedBarrier = 327,
    SpirvOpNamedBarrierInitialize = 328,
    SpirvOpMemoryNamedBarrier = 329,
    SpirvOpModuleProcessed = 330,
    SpirvOpExecutionModeId = 331,
    SpirvOpDecorateId = 332,
    SpirvOpGroupNonUniformElect = 333,
    SpirvOpGroupNonUniformAll = 334,
    SpirvOpGroupNonUniformAny = 335,
    SpirvOpGroupNonUniformAllEqual = 336,
    SpirvOpGroupNonUniformBroadcast = 337,
    SpirvOpGroupNonUniformBroadcastFirst = 338,
    SpirvOpGroupNonUniformBallot = 339,
    SpirvOpGroupNonUniformInverseBallot = 340,
    SpirvOpGroupNonUniformBallotBitExtract = 341,
    SpirvOpGroupNonUniformBallotBitCount = 342,
    SpirvOpGroupNonUniformBallotFindLSB = 343,
    SpirvOpGroupNonUniformBallotFindMSB = 344,
    SpirvOpGroupNonUniformShuffle = 345,
    SpirvOpGroupNonUniformShuffleXor = 346,
    SpirvOpGroupNonUniformShuffleUp = 347,
    SpirvOpGroupNonUniformShuffleDown = 348,
    SpirvOpGroupNonUniformIAdd = 349,
    SpirvOpGroupNonUniformFAdd = 350,
    SpirvOpGroupNonUniformIMul = 351,
    SpirvOpGroupNonUniformFMul = 352,
    SpirvOpGroupNonUniformSMin = 353,
    SpirvOpGroupNonUniformUMin = 354,
    SpirvOpGroupNonUniformFMin = 355,
    SpirvOpGroupNonUniformSMax = 356,
    SpirvOpGroupNonUniformUMax = 357,
    SpirvOpGroupNonUniformFMax = 358,
    SpirvOpGroupNonUniformBitwiseAnd = 359,
    SpirvOpGroupNonUniformBitwiseOr = 360,
    SpirvOpGroupNonUniformBitwiseXor = 361,
    SpirvOpGroupNonUniformLogicalAnd = 362,
    SpirvOpGroupNonUniformLogicalOr = 363,
    SpirvOpGroupNonUniformLogicalXor = 364,
    SpirvOpGroupNonUniformQuadBroadcast = 365,
    SpirvOpGroupNonUniformQuadSwap = 366,
    SpirvOpCopyLogical = 400,
    SpirvOpPtrEqual = 401,
    SpirvOpPtrNotEqual = 402,
    SpirvOpPtrDiff = 403,
    SpirvOpColorAttachmentReadEXT = 4160,
    SpirvOpDepthAttachmentReadEXT = 4161,
    SpirvOpStencilAttachmentReadEXT = 4162,
    SpirvOpTerminateInvocation = 4416,
    SpirvOpSubgroupBallotKHR = 4421,
    SpirvOpSubgroupFirstInvocationKHR = 4422,
    SpirvOpSubgroupAllKHR = 4428,
    SpirvOpSubgroupAnyKHR = 4429,
    SpirvOpSubgroupAllEqualKHR = 4430,
    SpirvOpGroupNonUniformRotateKHR = 4431,
    SpirvOpSubgroupReadInvocationKHR = 4432,
    SpirvOpTraceRayKHR = 4445,
    SpirvOpExecuteCallableKHR = 4446,
    SpirvOpConvertUToAccelerationStructureKHR = 4447,
    SpirvOpIgnoreIntersectionKHR = 4448,
    SpirvOpTerminateRayKHR = 4449,
    SpirvOpSDot = 4450,
    SpirvOpSDotKHR = 4450,
    SpirvOpUDot = 4451,
    SpirvOpUDotKHR = 4451,
    SpirvOpSUDot = 4452,
    SpirvOpSUDotKHR = 4452,
    SpirvOpSDotAccSat = 4453,
    SpirvOpSDotAccSatKHR = 4453,
    SpirvOpUDotAccSat = 4454,
    SpirvOpUDotAccSatKHR = 4454,
    SpirvOpSUDotAccSat = 4455,
    SpirvOpSUDotAccSatKHR = 4455,
    SpirvOpTypeCooperativeMatrixKHR = 4456,
    SpirvOpCooperativeMatrixLoadKHR = 4457,
    SpirvOpCooperativeMatrixStoreKHR = 4458,
    SpirvOpCooperativeMatrixMulAddKHR = 4459,
    SpirvOpCooperativeMatrixLengthKHR = 4460,
    SpirvOpTypeRayQueryKHR = 4472,
    SpirvOpRayQueryInitializeKHR = 4473,
    SpirvOpRayQueryTerminateKHR = 4474,
    SpirvOpRayQueryGenerateIntersectionKHR = 4475,
    SpirvOpRayQueryConfirmIntersectionKHR = 4476,
    SpirvOpRayQueryProceedKHR = 4477,
    SpirvOpRayQueryGetIntersectionTypeKHR = 4479,
    SpirvOpImageSampleWeightedQCOM = 4480,
    SpirvOpImageBoxFilterQCOM = 4481,
    SpirvOpImageBlockMatchSSDQCOM = 4482,
    SpirvOpImageBlockMatchSADQCOM = 4483,
    SpirvOpGroupIAddNonUniformAMD = 5000,
    SpirvOpGroupFAddNonUniformAMD = 5001,
    SpirvOpGroupFMinNonUniformAMD = 5002,
    SpirvOpGroupUMinNonUniformAMD = 5003,
    SpirvOpGroupSMinNonUniformAMD = 5004,
    SpirvOpGroupFMaxNonUniformAMD = 5005,
    SpirvOpGroupUMaxNonUniformAMD = 5006,
    SpirvOpGroupSMaxNonUniformAMD = 5007,
    SpirvOpFragmentMaskFetchAMD = 5011,
    SpirvOpFragmentFetchAMD = 5012,
    SpirvOpReadClockKHR = 5056,
    SpirvOpFinalizeNodePayloadsAMDX = 5075,
    SpirvOpFinishWritingNodePayloadAMDX = 5078,
    SpirvOpInitializeNodePayloadsAMDX = 5090,
    SpirvOpHitObjectRecordHitMotionNV = 5249,
    SpirvOpHitObjectRecordHitWithIndexMotionNV = 5250,
    SpirvOpHitObjectRecordMissMotionNV = 5251,
    SpirvOpHitObjectGetWorldToObjectNV = 5252,
    SpirvOpHitObjectGetObjectToWorldNV = 5253,
    SpirvOpHitObjectGetObjectRayDirectionNV = 5254,
    SpirvOpHitObjectGetObjectRayOriginNV = 5255,
    SpirvOpHitObjectTraceRayMotionNV = 5256,
    SpirvOpHitObjectGetShaderRecordBufferHandleNV = 5257,
    SpirvOpHitObjectGetShaderBindingTableRecordIndexNV = 5258,
    SpirvOpHitObjectRecordEmptyNV = 5259,
    SpirvOpHitObjectTraceRayNV = 5260,
    SpirvOpHitObjectRecordHitNV = 5261,
    SpirvOpHitObjectRecordHitWithIndexNV = 5262,
    SpirvOpHitObjectRecordMissNV = 5263,
    SpirvOpHitObjectExecuteShaderNV = 5264,
    SpirvOpHitObjectGetCurrentTimeNV = 5265,
    SpirvOpHitObjectGetAttributesNV = 5266,
    SpirvOpHitObjectGetHitKindNV = 5267,
    SpirvOpHitObjectGetPrimitiveIndexNV = 5268,
    SpirvOpHitObjectGetGeometryIndexNV = 5269,
    SpirvOpHitObjectGetInstanceIdNV = 5270,
    SpirvOpHitObjectGetInstanceCustomIndexNV = 5271,
    SpirvOpHitObjectGetWorldRayDirectionNV = 5272,
    SpirvOpHitObjectGetWorldRayOriginNV = 5273,
    SpirvOpHitObjectGetRayTMaxNV = 5274,
    SpirvOpHitObjectGetRayTMinNV = 5275,
    SpirvOpHitObjectIsEmptyNV = 5276,
    SpirvOpHitObjectIsHitNV = 5277,
    SpirvOpHitObjectIsMissNV = 5278,
    SpirvOpReorderThreadWithHitObjectNV = 5279,
    SpirvOpReorderThreadWithHintNV = 5280,
    SpirvOpTypeHitObjectNV = 5281,
    SpirvOpImageSampleFootprintNV = 5283,
    SpirvOpEmitMeshTasksEXT = 5294,
    SpirvOpSetMeshOutputsEXT = 5295,
    SpirvOpGroupNonUniformPartitionNV = 5296,
    SpirvOpWritePackedPrimitiveIndices4x8NV = 5299,
    SpirvOpFetchMicroTriangleVertexPositionNV = 5300,
    SpirvOpFetchMicroTriangleVertexBarycentricNV = 5301,
    SpirvOpReportIntersectionKHR = 5334,
    SpirvOpReportIntersectionNV = 5334,
    SpirvOpIgnoreIntersectionNV = 5335,
    SpirvOpTerminateRayNV = 5336,
    SpirvOpTraceNV = 5337,
    SpirvOpTraceMotionNV = 5338,
    SpirvOpTraceRayMotionNV = 5339,
    SpirvOpRayQueryGetIntersectionTriangleVertexPositionsKHR = 5340,
    SpirvOpTypeAccelerationStructureKHR = 5341,
    SpirvOpTypeAccelerationStructureNV = 5341,
    SpirvOpExecuteCallableNV = 5344,
    SpirvOpTypeCooperativeMatrixNV = 5358,
    SpirvOpCooperativeMatrixLoadNV = 5359,
    SpirvOpCooperativeMatrixStoreNV = 5360,
    SpirvOpCooperativeMatrixMulAddNV = 5361,
    SpirvOpCooperativeMatrixLengthNV = 5362,
    SpirvOpBeginInvocationInterlockEXT = 5364,
    SpirvOpEndInvocationInterlockEXT = 5365,
    SpirvOpDemoteToHelperInvocation = 5380,
    SpirvOpDemoteToHelperInvocationEXT = 5380,
    SpirvOpIsHelperInvocationEXT = 5381,
    SpirvOpConvertUToImageNV = 5391,
    SpirvOpConvertUToSamplerNV = 5392,
    SpirvOpConvertImageToUNV = 5393,
    SpirvOpConvertSamplerToUNV = 5394,
    SpirvOpConvertUToSampledImageNV = 5395,
    SpirvOpConvertSampledImageToUNV = 5396,
    SpirvOpSamplerImageAddressingModeNV = 5397,
    SpirvOpSubgroupShuffleINTEL = 5571,
    SpirvOpSubgroupShuffleDownINTEL = 5572,
    SpirvOpSubgroupShuffleUpINTEL = 5573,
    SpirvOpSubgroupShuffleXorINTEL = 5574,
    SpirvOpSubgroupBlockReadINTEL = 5575,
    SpirvOpSubgroupBlockWriteINTEL = 5576,
    SpirvOpSubgroupImageBlockReadINTEL = 5577,
    SpirvOpSubgroupImageBlockWriteINTEL = 5578,
    SpirvOpSubgroupImageMediaBlockReadINTEL = 5580,
    SpirvOpSubgroupImageMediaBlockWriteINTEL = 5581,
    SpirvOpUCountLeadingZerosINTEL = 5585,
    SpirvOpUCountTrailingZerosINTEL = 5586,
    SpirvOpAbsISubINTEL = 5587,
    SpirvOpAbsUSubINTEL = 5588,
    SpirvOpIAddSatINTEL = 5589,
    SpirvOpUAddSatINTEL = 5590,
    SpirvOpIAverageINTEL = 5591,
    SpirvOpUAverageINTEL = 5592,
    SpirvOpIAverageRoundedINTEL = 5593,
    SpirvOpUAverageRoundedINTEL = 5594,
    SpirvOpISubSatINTEL = 5595,
    SpirvOpUSubSatINTEL = 5596,
    SpirvOpIMul32x16INTEL = 5597,
    SpirvOpUMul32x16INTEL = 5598,
    SpirvOpConstantFunctionPointerINTEL = 5600,
    SpirvOpFunctionPointerCallINTEL = 5601,
    SpirvOpAsmTargetINTEL = 5609,
    SpirvOpAsmINTEL = 5610,
    SpirvOpAsmCallINTEL = 5611,
    SpirvOpAtomicFMinEXT = 5614,
    SpirvOpAtomicFMaxEXT = 5615,
    SpirvOpAssumeTrueKHR = 5630,
    SpirvOpExpectKHR = 5631,
    SpirvOpDecorateString = 5632,
    SpirvOpDecorateStringGOOGLE = 5632,
    SpirvOpMemberDecorateString = 5633,
    SpirvOpMemberDecorateStringGOOGLE = 5633,
    SpirvOpVmeImageINTEL = 5699,
    SpirvOpTypeVmeImageINTEL = 5700,
    SpirvOpTypeAvcImePayloadINTEL = 5701,
    SpirvOpTypeAvcRefPayloadINTEL = 5702,
    SpirvOpTypeAvcSicPayloadINTEL = 5703,
    SpirvOpTypeAvcMcePayloadINTEL = 5704,
    SpirvOpTypeAvcMceResultINTEL = 5705,
    SpirvOpTypeAvcImeResultINTEL = 5706,
    SpirvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,
    SpirvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,
    SpirvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709,
    SpirvOpTypeAvcImeDualReferenceStreaminINTEL = 5710,
    SpirvOpTypeAvcRefResultINTEL = 5711,
    SpirvOpTypeAvcSicResultINTEL = 5712,
    SpirvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,
    SpirvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,
    SpirvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,
    SpirvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,
    SpirvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,
    SpirvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,
    SpirvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,
    SpirvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,
    SpirvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,
    SpirvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,
    SpirvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,
    SpirvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,
    SpirvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,
    SpirvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,
    SpirvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,
    SpirvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,
    SpirvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,
    SpirvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,
    SpirvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,
    SpirvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732,
    SpirvOpSubgroupAvcMceConvertToImeResultINTEL = 5733,
    SpirvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,
    SpirvOpSubgroupAvcMceConvertToRefResultINTEL = 5735,
    SpirvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,
    SpirvOpSubgroupAvcMceConvertToSicResultINTEL = 5737,
    SpirvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738,
    SpirvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739,
    SpirvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,
    SpirvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,
    SpirvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,
    SpirvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743,
    SpirvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,
    SpirvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,
    SpirvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,
    SpirvOpSubgroupAvcImeInitializeINTEL = 5747,
    SpirvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748,
    SpirvOpSubgroupAvcImeSetDualReferenceINTEL = 5749,
    SpirvOpSubgroupAvcImeRefWindowSizeINTEL = 5750,
    SpirvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,
    SpirvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,
    SpirvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,
    SpirvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,
    SpirvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,
    SpirvOpSubgroupAvcImeSetWeightedSadINTEL = 5756,
    SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,
    SpirvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,
    SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,
    SpirvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,
    SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,
    SpirvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,
    SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,
    SpirvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,
    SpirvOpSubgroupAvcImeConvertToMceResultINTEL = 5765,
    SpirvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,
    SpirvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,
    SpirvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,
    SpirvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,
    SpirvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,
    SpirvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,
    SpirvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,
    SpirvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,
    SpirvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,
    SpirvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,
    SpirvOpSubgroupAvcImeGetBorderReachedINTEL = 5776,
    SpirvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,
    SpirvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,
    SpirvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,
    SpirvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,
    SpirvOpSubgroupAvcFmeInitializeINTEL = 5781,
    SpirvOpSubgroupAvcBmeInitializeINTEL = 5782,
    SpirvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,
    SpirvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,
    SpirvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,
    SpirvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,
    SpirvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,
    SpirvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,
    SpirvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,
    SpirvOpSubgroupAvcRefConvertToMceResultINTEL = 5790,
    SpirvOpSubgroupAvcSicInitializeINTEL = 5791,
    SpirvOpSubgroupAvcSicConfigureSkcINTEL = 5792,
    SpirvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,
    SpirvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,
    SpirvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,
    SpirvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,
    SpirvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,
    SpirvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,
    SpirvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,
    SpirvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,
    SpirvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,
    SpirvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,
    SpirvOpSubgroupAvcSicEvaluateIpeINTEL = 5803,
    SpirvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,
    SpirvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,
    SpirvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,
    SpirvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,
    SpirvOpSubgroupAvcSicConvertToMceResultINTEL = 5808,
    SpirvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,
    SpirvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,
    SpirvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,
    SpirvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,
    SpirvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,
    SpirvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,
    SpirvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,
    SpirvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816,
    SpirvOpVariableLengthArrayINTEL = 5818,
    SpirvOpSaveMemoryINTEL = 5819,
    SpirvOpRestoreMemoryINTEL = 5820,
    SpirvOpArbitraryFloatSinCosPiINTEL = 5840,
    SpirvOpArbitraryFloatCastINTEL = 5841,
    SpirvOpArbitraryFloatCastFromIntINTEL = 5842,
    SpirvOpArbitraryFloatCastToIntINTEL = 5843,
    SpirvOpArbitraryFloatAddINTEL = 5846,
    SpirvOpArbitraryFloatSubINTEL = 5847,
    SpirvOpArbitraryFloatMulINTEL = 5848,
    SpirvOpArbitraryFloatDivINTEL = 5849,
    SpirvOpArbitraryFloatGTINTEL = 5850,
    SpirvOpArbitraryFloatGEINTEL = 5851,
    SpirvOpArbitraryFloatLTINTEL = 5852,
    SpirvOpArbitraryFloatLEINTEL = 5853,
    SpirvOpArbitraryFloatEQINTEL = 5854,
    SpirvOpArbitraryFloatRecipINTEL = 5855,
    SpirvOpArbitraryFloatRSqrtINTEL = 5856,
    SpirvOpArbitraryFloatCbrtINTEL = 5857,
    SpirvOpArbitraryFloatHypotINTEL = 5858,
    SpirvOpArbitraryFloatSqrtINTEL = 5859,
    SpirvOpArbitraryFloatLogINTEL = 5860,
    SpirvOpArbitraryFloatLog2INTEL = 5861,
    SpirvOpArbitraryFloatLog10INTEL = 5862,
    SpirvOpArbitraryFloatLog1pINTEL = 5863,
    SpirvOpArbitraryFloatExpINTEL = 5864,
    SpirvOpArbitraryFloatExp2INTEL = 5865,
    SpirvOpArbitraryFloatExp10INTEL = 5866,
    SpirvOpArbitraryFloatExpm1INTEL = 5867,
    SpirvOpArbitraryFloatSinINTEL = 5868,
    SpirvOpArbitraryFloatCosINTEL = 5869,
    SpirvOpArbitraryFloatSinCosINTEL = 5870,
    SpirvOpArbitraryFloatSinPiINTEL = 5871,
    SpirvOpArbitraryFloatCosPiINTEL = 5872,
    SpirvOpArbitraryFloatASinINTEL = 5873,
    SpirvOpArbitraryFloatASinPiINTEL = 5874,
    SpirvOpArbitraryFloatACosINTEL = 5875,
    SpirvOpArbitraryFloatACosPiINTEL = 5876,
    SpirvOpArbitraryFloatATanINTEL = 5877,
    SpirvOpArbitraryFloatATanPiINTEL = 5878,
    SpirvOpArbitraryFloatATan2INTEL = 5879,
    SpirvOpArbitraryFloatPowINTEL = 5880,
    SpirvOpArbitraryFloatPowRINTEL = 5881,
    SpirvOpArbitraryFloatPowNINTEL = 5882,
    SpirvOpLoopControlINTEL = 5887,
    SpirvOpAliasDomainDeclINTEL = 5911,
    SpirvOpAliasScopeDeclINTEL = 5912,
    SpirvOpAliasScopeListDeclINTEL = 5913,
    SpirvOpFixedSqrtINTEL = 5923,
    SpirvOpFixedRecipINTEL = 5924,
    SpirvOpFixedRsqrtINTEL = 5925,
    SpirvOpFixedSinINTEL = 5926,
    SpirvOpFixedCosINTEL = 5927,
    SpirvOpFixedSinCosINTEL = 5928,
    SpirvOpFixedSinPiINTEL = 5929,
    SpirvOpFixedCosPiINTEL = 5930,
    SpirvOpFixedSinCosPiINTEL = 5931,
    SpirvOpFixedLogINTEL = 5932,
    SpirvOpFixedExpINTEL = 5933,
    SpirvOpPtrCastToCrossWorkgroupINTEL = 5934,
    SpirvOpCrossWorkgroupCastToPtrINTEL = 5938,
    SpirvOpReadPipeBlockingINTEL = 5946,
    SpirvOpWritePipeBlockingINTEL = 5947,
    SpirvOpFPGARegINTEL = 5949,
    SpirvOpRayQueryGetRayTMinKHR = 6016,
    SpirvOpRayQueryGetRayFlagsKHR = 6017,
    SpirvOpRayQueryGetIntersectionTKHR = 6018,
    SpirvOpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019,
    SpirvOpRayQueryGetIntersectionInstanceIdKHR = 6020,
    SpirvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,
    SpirvOpRayQueryGetIntersectionGeometryIndexKHR = 6022,
    SpirvOpRayQueryGetIntersectionPrimitiveIndexKHR = 6023,
    SpirvOpRayQueryGetIntersectionBarycentricsKHR = 6024,
    SpirvOpRayQueryGetIntersectionFrontFaceKHR = 6025,
    SpirvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,
    SpirvOpRayQueryGetIntersectionObjectRayDirectionKHR = 6027,
    SpirvOpRayQueryGetIntersectionObjectRayOriginKHR = 6028,
    SpirvOpRayQueryGetWorldRayDirectionKHR = 6029,
    SpirvOpRayQueryGetWorldRayOriginKHR = 6030,
    SpirvOpRayQueryGetIntersectionObjectToWorldKHR = 6031,
    SpirvOpRayQueryGetIntersectionWorldToObjectKHR = 6032,
    SpirvOpAtomicFAddEXT = 6035,
    SpirvOpTypeBufferSurfaceINTEL = 6086,
    SpirvOpTypeStructContinuedINTEL = 6090,
    SpirvOpConstantCompositeContinuedINTEL = 6091,
    SpirvOpSpecConstantCompositeContinuedINTEL = 6092,
    SpirvOpCompositeConstructContinuedINTEL = 6096,
    SpirvOpConvertFToBF16INTEL = 6116,
    SpirvOpConvertBF16ToFINTEL = 6117,
    SpirvOpControlBarrierArriveINTEL = 6142,
    SpirvOpControlBarrierWaitINTEL = 6143,
    SpirvOpGroupIMulKHR = 6401,
    SpirvOpGroupFMulKHR = 6402,
    SpirvOpGroupBitwiseAndKHR = 6403,
    SpirvOpGroupBitwiseOrKHR = 6404,
    SpirvOpGroupBitwiseXorKHR = 6405,
    SpirvOpGroupLogicalAndKHR = 6406,
    SpirvOpGroupLogicalOrKHR = 6407,
    SpirvOpGroupLogicalXorKHR = 6408,
    SpirvOpMax = 0x7fffffff,
} SpirvOp;

#ifdef SPV_ENABLE_UTILITY_CODE
#ifndef __cplusplus
#include <stdbool.h>
#endif
inline void SpirvHasResultAndType(SpirvOp opcode, bool *hasResult, bool *hasResultType) {
    *hasResult = *hasResultType = false;
    switch (opcode) {
    default: /* unknown opcode */ break;
    case SpirvOpNop: *hasResult = false; *hasResultType = false; break;
    case SpirvOpUndef: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSourceContinued: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSource: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSourceExtension: *hasResult = false; *hasResultType = false; break;
    case SpirvOpName: *hasResult = false; *hasResultType = false; break;
    case SpirvOpMemberName: *hasResult = false; *hasResultType = false; break;
    case SpirvOpString: *hasResult = true; *hasResultType = false; break;
    case SpirvOpLine: *hasResult = false; *hasResultType = false; break;
    case SpirvOpExtension: *hasResult = false; *hasResultType = false; break;
    case SpirvOpExtInstImport: *hasResult = true; *hasResultType = false; break;
    case SpirvOpExtInst: *hasResult = true; *hasResultType = true; break;
    case SpirvOpMemoryModel: *hasResult = false; *hasResultType = false; break;
    case SpirvOpEntryPoint: *hasResult = false; *hasResultType = false; break;
    case SpirvOpExecutionMode: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCapability: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTypeVoid: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeBool: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeInt: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeFloat: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeVector: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeMatrix: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeImage: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeSampler: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeSampledImage: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeArray: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeRuntimeArray: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeStruct: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeOpaque: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypePointer: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeFunction: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeEvent: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeDeviceEvent: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeReserveId: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeQueue: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypePipe: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeForwardPointer: *hasResult = false; *hasResultType = false; break;
    case SpirvOpConstantTrue: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConstantFalse: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConstant: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConstantComposite: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConstantSampler: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConstantNull: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSpecConstantTrue: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSpecConstantFalse: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSpecConstant: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSpecConstantComposite: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSpecConstantOp: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFunction: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFunctionParameter: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFunctionEnd: *hasResult = false; *hasResultType = false; break;
    case SpirvOpFunctionCall: *hasResult = true; *hasResultType = true; break;
    case SpirvOpVariable: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageTexelPointer: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLoad: *hasResult = true; *hasResultType = true; break;
    case SpirvOpStore: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCopyMemory: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCopyMemorySized: *hasResult = false; *hasResultType = false; break;
    case SpirvOpAccessChain: *hasResult = true; *hasResultType = true; break;
    case SpirvOpInBoundsAccessChain: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPtrAccessChain: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArrayLength: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGenericPtrMemSemantics: *hasResult = true; *hasResultType = true; break;
    case SpirvOpInBoundsPtrAccessChain: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDecorate: *hasResult = false; *hasResultType = false; break;
    case SpirvOpMemberDecorate: *hasResult = false; *hasResultType = false; break;
    case SpirvOpDecorationGroup: *hasResult = true; *hasResultType = false; break;
    case SpirvOpGroupDecorate: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupMemberDecorate: *hasResult = false; *hasResultType = false; break;
    case SpirvOpVectorExtractDynamic: *hasResult = true; *hasResultType = true; break;
    case SpirvOpVectorInsertDynamic: *hasResult = true; *hasResultType = true; break;
    case SpirvOpVectorShuffle: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCompositeConstruct: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCompositeExtract: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCompositeInsert: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCopyObject: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTranspose: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSampledImage: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleDrefImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleDrefExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleProjImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleProjExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleProjDrefImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleProjDrefExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageFetch: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageGather: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageDrefGather: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageRead: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageWrite: *hasResult = false; *hasResultType = false; break;
    case SpirvOpImage: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQueryFormat: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQueryOrder: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQuerySizeLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQuerySize: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQueryLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQueryLevels: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageQuerySamples: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertFToU: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertFToS: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertSToF: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertUToF: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUConvert: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSConvert: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFConvert: *hasResult = true; *hasResultType = true; break;
    case SpirvOpQuantizeToF16: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertPtrToU: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSatConvertSToU: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSatConvertUToS: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertUToPtr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPtrCastToGeneric: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGenericCastToPtr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGenericCastToPtrExplicit: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitcast: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSNegate: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFNegate: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpISub: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFSub: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIMul: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFMul: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUDiv: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSDiv: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFDiv: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUMod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSRem: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSMod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFRem: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFMod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpVectorTimesScalar: *hasResult = true; *hasResultType = true; break;
    case SpirvOpMatrixTimesScalar: *hasResult = true; *hasResultType = true; break;
    case SpirvOpVectorTimesMatrix: *hasResult = true; *hasResultType = true; break;
    case SpirvOpMatrixTimesVector: *hasResult = true; *hasResultType = true; break;
    case SpirvOpMatrixTimesMatrix: *hasResult = true; *hasResultType = true; break;
    case SpirvOpOuterProduct: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIAddCarry: *hasResult = true; *hasResultType = true; break;
    case SpirvOpISubBorrow: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUMulExtended: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSMulExtended: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAny: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAll: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIsNan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIsInf: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIsFinite: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIsNormal: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSignBitSet: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLessOrGreater: *hasResult = true; *hasResultType = true; break;
    case SpirvOpOrdered: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUnordered: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLogicalEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLogicalNotEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLogicalOr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLogicalAnd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLogicalNot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSelect: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpINotEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUGreaterThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSGreaterThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUGreaterThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSGreaterThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpULessThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSLessThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpULessThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSLessThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFOrdEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFUnordEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFOrdNotEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFUnordNotEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFOrdLessThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFUnordLessThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFOrdGreaterThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFUnordGreaterThan: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFOrdLessThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFUnordLessThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFOrdGreaterThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFUnordGreaterThanEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpShiftRightLogical: *hasResult = true; *hasResultType = true; break;
    case SpirvOpShiftRightArithmetic: *hasResult = true; *hasResultType = true; break;
    case SpirvOpShiftLeftLogical: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitwiseOr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitwiseXor: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitwiseAnd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpNot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitFieldInsert: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitFieldSExtract: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitFieldUExtract: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitReverse: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBitCount: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDPdx: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDPdy: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFwidth: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDPdxFine: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDPdyFine: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFwidthFine: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDPdxCoarse: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDPdyCoarse: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFwidthCoarse: *hasResult = true; *hasResultType = true; break;
    case SpirvOpEmitVertex: *hasResult = false; *hasResultType = false; break;
    case SpirvOpEndPrimitive: *hasResult = false; *hasResultType = false; break;
    case SpirvOpEmitStreamVertex: *hasResult = false; *hasResultType = false; break;
    case SpirvOpEndStreamPrimitive: *hasResult = false; *hasResultType = false; break;
    case SpirvOpControlBarrier: *hasResult = false; *hasResultType = false; break;
    case SpirvOpMemoryBarrier: *hasResult = false; *hasResultType = false; break;
    case SpirvOpAtomicLoad: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicStore: *hasResult = false; *hasResultType = false; break;
    case SpirvOpAtomicExchange: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicCompareExchange: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicCompareExchangeWeak: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicIIncrement: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicIDecrement: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicIAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicISub: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicSMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicUMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicSMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicUMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicAnd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicOr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicXor: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPhi: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLoopMerge: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSelectionMerge: *hasResult = false; *hasResultType = false; break;
    case SpirvOpLabel: *hasResult = true; *hasResultType = false; break;
    case SpirvOpBranch: *hasResult = false; *hasResultType = false; break;
    case SpirvOpBranchConditional: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSwitch: *hasResult = false; *hasResultType = false; break;
    case SpirvOpKill: *hasResult = false; *hasResultType = false; break;
    case SpirvOpReturn: *hasResult = false; *hasResultType = false; break;
    case SpirvOpReturnValue: *hasResult = false; *hasResultType = false; break;
    case SpirvOpUnreachable: *hasResult = false; *hasResultType = false; break;
    case SpirvOpLifetimeStart: *hasResult = false; *hasResultType = false; break;
    case SpirvOpLifetimeStop: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupAsyncCopy: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupWaitEvents: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupAll: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupAny: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupBroadcast: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupIAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupUMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupSMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupUMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupSMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReadPipe: *hasResult = true; *hasResultType = true; break;
    case SpirvOpWritePipe: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReservedReadPipe: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReservedWritePipe: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReserveReadPipePackets: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReserveWritePipePackets: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCommitReadPipe: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCommitWritePipe: *hasResult = false; *hasResultType = false; break;
    case SpirvOpIsValidReserveId: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetNumPipePackets: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetMaxPipePackets: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupReserveReadPipePackets: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupReserveWritePipePackets: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupCommitReadPipe: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupCommitWritePipe: *hasResult = false; *hasResultType = false; break;
    case SpirvOpEnqueueMarker: *hasResult = true; *hasResultType = true; break;
    case SpirvOpEnqueueKernel: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetKernelNDrangeSubGroupCount: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetKernelNDrangeMaxSubGroupSize: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetKernelWorkGroupSize: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetKernelPreferredWorkGroupSizeMultiple: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRetainEvent: *hasResult = false; *hasResultType = false; break;
    case SpirvOpReleaseEvent: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCreateUserEvent: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIsValidEvent: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSetUserEventStatus: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCaptureEventProfilingInfo: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGetDefaultQueue: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBuildNDRange: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleDrefImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleDrefExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleProjImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleProjExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleProjDrefImplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseSampleProjDrefExplicitLod: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseFetch: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseGather: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseDrefGather: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSparseTexelsResident: *hasResult = true; *hasResultType = true; break;
    case SpirvOpNoLine: *hasResult = false; *hasResultType = false; break;
    case SpirvOpAtomicFlagTestAndSet: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicFlagClear: *hasResult = false; *hasResultType = false; break;
    case SpirvOpImageSparseRead: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSizeOf: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypePipeStorage: *hasResult = true; *hasResultType = false; break;
    case SpirvOpConstantPipeStorage: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCreatePipeFromPipeStorage: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetKernelLocalSizeForSubgroupCount: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGetKernelMaxNumSubgroups: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypeNamedBarrier: *hasResult = true; *hasResultType = false; break;
    case SpirvOpNamedBarrierInitialize: *hasResult = true; *hasResultType = true; break;
    case SpirvOpMemoryNamedBarrier: *hasResult = false; *hasResultType = false; break;
    case SpirvOpModuleProcessed: *hasResult = false; *hasResultType = false; break;
    case SpirvOpExecutionModeId: *hasResult = false; *hasResultType = false; break;
    case SpirvOpDecorateId: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupNonUniformElect: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformAll: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformAny: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformAllEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBroadcast: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBroadcastFirst: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBallot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformInverseBallot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBallotBitExtract: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBallotBitCount: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBallotFindLSB: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBallotFindMSB: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformShuffle: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformShuffleXor: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformShuffleUp: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformShuffleDown: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformIAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformFAdd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformIMul: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformFMul: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformSMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformUMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformFMin: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformSMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformUMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformFMax: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBitwiseAnd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBitwiseOr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformBitwiseXor: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformLogicalAnd: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformLogicalOr: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformLogicalXor: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformQuadBroadcast: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformQuadSwap: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCopyLogical: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPtrEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPtrNotEqual: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPtrDiff: *hasResult = true; *hasResultType = true; break;
    case SpirvOpColorAttachmentReadEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDepthAttachmentReadEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpStencilAttachmentReadEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTerminateInvocation: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSubgroupBallotKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupFirstInvocationKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAllKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAnyKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAllEqualKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupNonUniformRotateKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupReadInvocationKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTraceRayKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpExecuteCallableKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpConvertUToAccelerationStructureKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIgnoreIntersectionKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTerminateRayKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSDot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUDot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSUDot: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSDotAccSat: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUDotAccSat: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSUDotAccSat: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypeCooperativeMatrixKHR: *hasResult = true; *hasResultType = false; break;
    case SpirvOpCooperativeMatrixLoadKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCooperativeMatrixStoreKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCooperativeMatrixMulAddKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCooperativeMatrixLengthKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypeRayQueryKHR: *hasResult = true; *hasResultType = false; break;
    case SpirvOpRayQueryInitializeKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpRayQueryTerminateKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpRayQueryGenerateIntersectionKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpRayQueryConfirmIntersectionKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpRayQueryProceedKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionTypeKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageSampleWeightedQCOM: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageBoxFilterQCOM: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageBlockMatchSSDQCOM: *hasResult = true; *hasResultType = true; break;
    case SpirvOpImageBlockMatchSADQCOM: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupIAddNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFAddNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFMinNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupUMinNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupSMinNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFMaxNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupUMaxNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupSMaxNonUniformAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFragmentMaskFetchAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFragmentFetchAMD: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReadClockKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFinalizeNodePayloadsAMDX: *hasResult = false; *hasResultType = false; break;
    case SpirvOpFinishWritingNodePayloadAMDX: *hasResult = true; *hasResultType = true; break;
    case SpirvOpInitializeNodePayloadsAMDX: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectRecordHitMotionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectRecordHitWithIndexMotionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectRecordMissMotionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectGetWorldToObjectNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetObjectToWorldNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetObjectRayDirectionNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetObjectRayOriginNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectTraceRayMotionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectGetShaderRecordBufferHandleNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetShaderBindingTableRecordIndexNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectRecordEmptyNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectTraceRayNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectRecordHitNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectRecordHitWithIndexNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectRecordMissNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectExecuteShaderNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectGetCurrentTimeNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetAttributesNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpHitObjectGetHitKindNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetPrimitiveIndexNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetGeometryIndexNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetInstanceIdNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetInstanceCustomIndexNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetWorldRayDirectionNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetWorldRayOriginNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetRayTMaxNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectGetRayTMinNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectIsEmptyNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectIsHitNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpHitObjectIsMissNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReorderThreadWithHitObjectNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpReorderThreadWithHintNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTypeHitObjectNV: *hasResult = true; *hasResultType = false; break;
    case SpirvOpImageSampleFootprintNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpEmitMeshTasksEXT: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSetMeshOutputsEXT: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupNonUniformPartitionNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpWritePackedPrimitiveIndices4x8NV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpFetchMicroTriangleVertexPositionNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFetchMicroTriangleVertexBarycentricNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReportIntersectionNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIgnoreIntersectionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTerminateRayNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTraceNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTraceMotionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTraceRayMotionNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpRayQueryGetIntersectionTriangleVertexPositionsKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypeAccelerationStructureNV: *hasResult = true; *hasResultType = false; break;
    case SpirvOpExecuteCallableNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpTypeCooperativeMatrixNV: *hasResult = true; *hasResultType = false; break;
    case SpirvOpCooperativeMatrixLoadNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCooperativeMatrixStoreNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCooperativeMatrixMulAddNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCooperativeMatrixLengthNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpBeginInvocationInterlockEXT: *hasResult = false; *hasResultType = false; break;
    case SpirvOpEndInvocationInterlockEXT: *hasResult = false; *hasResultType = false; break;
    case SpirvOpDemoteToHelperInvocation: *hasResult = false; *hasResultType = false; break;
    case SpirvOpIsHelperInvocationEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertUToImageNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertUToSamplerNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertImageToUNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertSamplerToUNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertUToSampledImageNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertSampledImageToUNV: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSamplerImageAddressingModeNV: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSubgroupShuffleINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupShuffleDownINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupShuffleUpINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupShuffleXorINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupBlockReadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupBlockWriteINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSubgroupImageBlockReadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupImageBlockWriteINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSubgroupImageMediaBlockReadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupImageMediaBlockWriteINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpUCountLeadingZerosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUCountTrailingZerosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAbsISubINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAbsUSubINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIAddSatINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUAddSatINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIAverageINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUAverageINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIAverageRoundedINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUAverageRoundedINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpISubSatINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUSubSatINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpIMul32x16INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpUMul32x16INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConstantFunctionPointerINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFunctionPointerCallINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAsmTargetINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAsmINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAsmCallINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicFMinEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicFMaxEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAssumeTrueKHR: *hasResult = false; *hasResultType = false; break;
    case SpirvOpExpectKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpDecorateString: *hasResult = false; *hasResultType = false; break;
    case SpirvOpMemberDecorateString: *hasResult = false; *hasResultType = false; break;
    case SpirvOpVmeImageINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypeVmeImageINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcImePayloadINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcRefPayloadINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcSicPayloadINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcMcePayloadINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcMceResultINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcImeResultINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcImeResultSingleReferenceStreamoutINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcImeResultDualReferenceStreamoutINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcImeSingleReferenceStreaminINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcImeDualReferenceStreaminINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcRefResultINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeAvcSicResultINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetInterShapePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetAcOnlyHaarINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceConvertToImePayloadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceConvertToImeResultINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceConvertToRefPayloadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceConvertToRefResultINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceConvertToSicPayloadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceConvertToSicResultINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetMotionVectorsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterDistortionsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetBestInterDistortionsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterMajorShapeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterMinorShapeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterDirectionsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterMotionVectorCountINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterReferenceIdsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeInitializeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeSetSingleReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeSetDualReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeRefWindowSizeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeAdjustRefOffsetINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeConvertToMcePayloadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeSetWeightedSadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeConvertToMceResultINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetDualReferenceStreaminINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetBorderReachedINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcFmeInitializeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcBmeInitializeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefConvertToMcePayloadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefSetBilinearFilterEnableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcRefConvertToMceResultINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicInitializeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicConfigureSkcINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicConfigureIpeLumaINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetMotionVectorMaskINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicConvertToMcePayloadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicSetBilinearFilterEnableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicEvaluateIpeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicConvertToMceResultINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetIpeLumaShapeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetIpeChromaModeINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSubgroupAvcSicGetInterRawSadsINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpVariableLengthArrayINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpSaveMemoryINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRestoreMemoryINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpArbitraryFloatSinCosPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatCastINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatCastFromIntINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatCastToIntINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatAddINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatSubINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatMulINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatDivINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatGTINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatGEINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatLTINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatLEINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatEQINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatRecipINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatRSqrtINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatCbrtINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatHypotINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatSqrtINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatLogINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatLog2INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatLog10INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatLog1pINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatExpINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatExp2INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatExp10INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatExpm1INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatSinINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatCosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatSinCosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatSinPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatCosPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatASinINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatASinPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatACosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatACosPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatATanINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatATanPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatATan2INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatPowINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatPowRINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpArbitraryFloatPowNINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpLoopControlINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpAliasDomainDeclINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpAliasScopeDeclINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpAliasScopeListDeclINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpFixedSqrtINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedRecipINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedRsqrtINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedSinINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedCosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedSinCosINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedSinPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedCosPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedSinCosPiINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedLogINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFixedExpINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpPtrCastToCrossWorkgroupINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpCrossWorkgroupCastToPtrINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpReadPipeBlockingINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpWritePipeBlockingINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpFPGARegINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetRayTMinKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetRayFlagsKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionTKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionInstanceCustomIndexKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionInstanceIdKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionGeometryIndexKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionPrimitiveIndexKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionBarycentricsKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionFrontFaceKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionObjectRayDirectionKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionObjectRayOriginKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetWorldRayDirectionKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetWorldRayOriginKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionObjectToWorldKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpRayQueryGetIntersectionWorldToObjectKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpAtomicFAddEXT: *hasResult = true; *hasResultType = true; break;
    case SpirvOpTypeBufferSurfaceINTEL: *hasResult = true; *hasResultType = false; break;
    case SpirvOpTypeStructContinuedINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpConstantCompositeContinuedINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpSpecConstantCompositeContinuedINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpCompositeConstructContinuedINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertFToBF16INTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpConvertBF16ToFINTEL: *hasResult = true; *hasResultType = true; break;
    case SpirvOpControlBarrierArriveINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpControlBarrierWaitINTEL: *hasResult = false; *hasResultType = false; break;
    case SpirvOpGroupIMulKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupFMulKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupBitwiseAndKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupBitwiseOrKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupBitwiseXorKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupLogicalAndKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupLogicalOrKHR: *hasResult = true; *hasResultType = true; break;
    case SpirvOpGroupLogicalXorKHR: *hasResult = true; *hasResultType = true; break;
    }
}
#endif /* SPV_ENABLE_UTILITY_CODE */

#endif

